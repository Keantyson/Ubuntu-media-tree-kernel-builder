From f2b9f97536be9770f842eee0f97c79b4de306d48 Mon Sep 17 00:00:00 2001
From: Brad Love <hidden@email.co>
Date: Fri, 6 Oct 2017 11:19:13 -0500
Subject: [PATCH 12/23] cx2xxxx: Ensure i2c platform data object lifetime

---
 drivers/media/pci/cx23885/cx23885-dvb.c | 457 ++++++++++++++++++--------------
 drivers/media/usb/cx231xx/cx231xx-dvb.c | 135 ++++++----
 2 files changed, 346 insertions(+), 246 deletions(-)

diff --git a/drivers/media/pci/cx23885/cx23885-dvb.c b/drivers/media/pci/cx23885/cx23885-dvb.c
index 979b66627f60..e6735f82215a 100644
--- a/drivers/media/pci/cx23885/cx23885-dvb.c
+++ b/drivers/media/pci/cx23885/cx23885-dvb.c
@@ -601,6 +601,23 @@ static struct lgdt3306a_config hauppauge_quadHD_ATSC_b_config = {
 	.xtalMHz                = 25, /* 24 or 25 */
 };
 
+#define I2C_ZALLOC_PLATFORM_DATA(ptr, failure...) \
+	do { \
+		ptr = kzalloc(sizeof(*ptr), GFP_KERNEL); \
+		pr_info("i2c priv alloc " #ptr " = %p\n", ptr); \
+		if (ptr == NULL) { failure; } \
+	} while(0)
+
+static void cx23885_i2c_unregister_device(struct i2c_client *client)
+{
+	pr_info("i2c priv free %p\n", client->dev.platform_data);
+	if (client->dev.platform_data) {
+		kfree(client->dev.platform_data);
+		client->dev.platform_data = NULL;
+	}
+	i2c_unregister_device(client);
+}
+
 static int p8000_set_voltage(struct dvb_frontend *fe,
 			     enum fe_sec_voltage voltage)
 {
@@ -1144,25 +1161,27 @@ static int dvb_register_ci_mac(struct cx23885_tsport *port)
 	case CX23885_BOARD_DVBSKY_T980C:
 	case CX23885_BOARD_TT_CT2_4500_CI: {
 		u8 eeprom[256]; /* 24C02 i2c eeprom */
-		struct sp2_config sp2_config;
+		struct sp2_config *sp2_config;
 		struct i2c_board_info info;
 		struct cx23885_i2c *i2c_bus = &dev->i2c_bus[0];
 
 		/* attach CI */
-		memset(&sp2_config, 0, sizeof(sp2_config));
-		sp2_config.dvb_adap = &port->frontends.adapter;
-		sp2_config.priv = port;
-		sp2_config.ci_control = cx23885_sp2_ci_ctrl;
+		I2C_ZALLOC_PLATFORM_DATA(sp2_config, return -ENOMEM);
+		sp2_config->dvb_adap = &port->frontends.adapter;
+		sp2_config->priv = port;
+		sp2_config->ci_control = cx23885_sp2_ci_ctrl;
 		memset(&info, 0, sizeof(struct i2c_board_info));
 		strlcpy(info.type, "sp2", I2C_NAME_SIZE);
 		info.addr = 0x40;
-		info.platform_data = &sp2_config;
+		info.platform_data = sp2_config;
 		request_module(info.type);
 		client_ci = i2c_new_device(&i2c_bus->i2c_adap, &info);
-		if (client_ci == NULL || client_ci->dev.driver == NULL)
+		if (client_ci == NULL || client_ci->dev.driver == NULL) {
+			kfree(sp2_config);
 			return -ENODEV;
+		}
 		if (!try_module_get(client_ci->dev.driver->owner)) {
-			i2c_unregister_device(client_ci);
+			cx23885_i2c_unregister_device(client_ci);
 			return -ENODEV;
 		}
 		port->i2c_client_ci = client_ci;
@@ -1189,11 +1208,11 @@ static int dvb_register(struct cx23885_tsport *port)
 	struct cx23885_dev *dev = port->dev;
 	struct cx23885_i2c *i2c_bus = NULL, *i2c_bus2 = NULL;
 	struct vb2_dvb_frontend *fe0, *fe1 = NULL;
-	struct si2168_config si2168_config;
-	struct si2165_platform_data si2165_pdata;
-	struct si2157_config si2157_config;
-	struct ts2020_config ts2020_config;
-	struct m88ds3103_platform_data m88ds3103_pdata;
+	struct si2168_config *si2168_config;
+	struct si2165_platform_data *si2165_pdata;
+	struct si2157_config *si2157_config;
+	struct ts2020_config *ts2020_config;
+	struct m88ds3103_platform_data *m88ds3103_pdata;
 	struct i2c_board_info info;
 	struct i2c_adapter *adapter;
 	struct i2c_client *client_demod = NULL, *client_tuner = NULL;
@@ -1807,8 +1826,8 @@ static int dvb_register(struct cx23885_tsport *port)
 		fe0->dvb.frontend->ops.set_voltage = p8000_set_voltage;
 		break;
 	case CX23885_BOARD_HAUPPAUGE_HVR4400: {
-		struct tda10071_platform_data tda10071_pdata = hauppauge_tda10071_pdata;
-		struct a8293_platform_data a8293_pdata = {};
+		struct tda10071_platform_data *tda10071_pdata;
+		struct a8293_platform_data *a8293_pdata;
 
 		i2c_bus = &dev->i2c_bus[0];
 		i2c_bus2 = &dev->i2c_bus[1];
@@ -1816,33 +1835,40 @@ static int dvb_register(struct cx23885_tsport *port)
 		/* port b */
 		case 1:
 			/* attach demod + tuner combo */
+			I2C_ZALLOC_PLATFORM_DATA(tda10071_pdata, goto frontend_detach);
+			*tda10071_pdata = hauppauge_tda10071_pdata;
 			memset(&info, 0, sizeof(info));
 			strlcpy(info.type, "tda10071_cx24118", I2C_NAME_SIZE);
 			info.addr = 0x05;
-			info.platform_data = &tda10071_pdata;
+			info.platform_data = tda10071_pdata;
 			request_module("tda10071");
 			client_demod = i2c_new_device(&i2c_bus->i2c_adap, &info);
-			if (!client_demod || !client_demod->dev.driver)
+			if (!client_demod || !client_demod->dev.driver) {
+				kfree(tda10071_pdata);
 				goto frontend_detach;
+			}
 			if (!try_module_get(client_demod->dev.driver->owner)) {
-				i2c_unregister_device(client_demod);
+				cx23885_i2c_unregister_device(client_demod);
 				goto frontend_detach;
 			}
-			fe0->dvb.frontend = tda10071_pdata.get_dvb_frontend(client_demod);
+			fe0->dvb.frontend = tda10071_pdata->get_dvb_frontend(client_demod);
 			port->i2c_client_demod = client_demod;
 
 			/* attach SEC */
-			a8293_pdata.dvb_frontend = fe0->dvb.frontend;
+			I2C_ZALLOC_PLATFORM_DATA(a8293_pdata, goto frontend_detach);
+			a8293_pdata->dvb_frontend = fe0->dvb.frontend;
 			memset(&info, 0, sizeof(info));
 			strlcpy(info.type, "a8293", I2C_NAME_SIZE);
 			info.addr = 0x0b;
-			info.platform_data = &a8293_pdata;
+			info.platform_data = a8293_pdata;
 			request_module("a8293");
 			client_sec = i2c_new_device(&i2c_bus->i2c_adap, &info);
-			if (!client_sec || !client_sec->dev.driver)
+			if (!client_sec || !client_sec->dev.driver) {
+				kfree(a8293_pdata);
 				goto frontend_detach;
+			}
 			if (!try_module_get(client_sec->dev.driver->owner)) {
-				i2c_unregister_device(client_sec);
+				cx23885_i2c_unregister_device(client_sec);
 				goto frontend_detach;
 			}
 			port->i2c_client_sec = client_sec;
@@ -1850,21 +1876,23 @@ static int dvb_register(struct cx23885_tsport *port)
 		/* port c */
 		case 2:
 			/* attach frontend */
-			memset(&si2165_pdata, 0, sizeof(si2165_pdata));
-			si2165_pdata.fe = &fe0->dvb.frontend;
-			si2165_pdata.chip_mode = SI2165_MODE_PLL_XTAL,
-			si2165_pdata.ref_freq_Hz = 16000000,
+			I2C_ZALLOC_PLATFORM_DATA(si2165_pdata, goto frontend_detach);
+			si2165_pdata->fe = &fe0->dvb.frontend;
+			si2165_pdata->chip_mode = SI2165_MODE_PLL_XTAL,
+			si2165_pdata->ref_freq_Hz = 16000000,
 			memset(&info, 0, sizeof(struct i2c_board_info));
 			strlcpy(info.type, "si2165", I2C_NAME_SIZE);
 			info.addr = 0x64;
-			info.platform_data = &si2165_pdata;
+			info.platform_data = si2165_pdata;
 			request_module(info.type);
 			client_demod = i2c_new_device(&i2c_bus->i2c_adap, &info);
 			if (client_demod == NULL ||
-					client_demod->dev.driver == NULL)
+					client_demod->dev.driver == NULL) {
+				kfree(si2165_pdata);
 				goto frontend_detach;
+			}
 			if (!try_module_get(client_demod->dev.driver->owner)) {
-				i2c_unregister_device(client_demod);
+				cx23885_i2c_unregister_device(client_demod);
 				goto frontend_detach;
 			}
 			port->i2c_client_demod = client_demod;
@@ -1882,39 +1910,46 @@ static int dvb_register(struct cx23885_tsport *port)
 		break;
 	}
 	case CX23885_BOARD_HAUPPAUGE_STARBURST: {
-		struct tda10071_platform_data tda10071_pdata = hauppauge_tda10071_pdata;
-		struct a8293_platform_data a8293_pdata = {};
+		struct tda10071_platform_data *tda10071_pdata;
+		struct a8293_platform_data *a8293_pdata;
 
 		i2c_bus = &dev->i2c_bus[0];
 
 		/* attach demod + tuner combo */
+		I2C_ZALLOC_PLATFORM_DATA(tda10071_pdata, goto frontend_detach);
+		*tda10071_pdata = hauppauge_tda10071_pdata;
 		memset(&info, 0, sizeof(info));
 		strlcpy(info.type, "tda10071_cx24118", I2C_NAME_SIZE);
 		info.addr = 0x05;
-		info.platform_data = &tda10071_pdata;
+		info.platform_data = tda10071_pdata;
 		request_module("tda10071");
 		client_demod = i2c_new_device(&i2c_bus->i2c_adap, &info);
-		if (!client_demod || !client_demod->dev.driver)
+		if (!client_demod || !client_demod->dev.driver) {
+			kfree(tda10071_pdata);
 			goto frontend_detach;
+		}
 		if (!try_module_get(client_demod->dev.driver->owner)) {
-			i2c_unregister_device(client_demod);
+			cx23885_i2c_unregister_device(client_demod);
 			goto frontend_detach;
 		}
-		fe0->dvb.frontend = tda10071_pdata.get_dvb_frontend(client_demod);
+		fe0->dvb.frontend = tda10071_pdata->get_dvb_frontend(client_demod);
 		port->i2c_client_demod = client_demod;
 
 		/* attach SEC */
-		a8293_pdata.dvb_frontend = fe0->dvb.frontend;
+		I2C_ZALLOC_PLATFORM_DATA(a8293_pdata, goto frontend_detach);
+		a8293_pdata->dvb_frontend = fe0->dvb.frontend;
 		memset(&info, 0, sizeof(info));
 		strlcpy(info.type, "a8293", I2C_NAME_SIZE);
 		info.addr = 0x0b;
-		info.platform_data = &a8293_pdata;
+		info.platform_data = a8293_pdata;
 		request_module("a8293");
 		client_sec = i2c_new_device(&i2c_bus->i2c_adap, &info);
-		if (!client_sec || !client_sec->dev.driver)
+		if (!client_sec || !client_sec->dev.driver) {
+			kfree(a8293_pdata);
 			goto frontend_detach;
+		}
 		if (!try_module_get(client_sec->dev.driver->owner)) {
-			i2c_unregister_device(client_sec);
+			cx23885_i2c_unregister_device(client_sec);
 			goto frontend_detach;
 		}
 		port->i2c_client_sec = client_sec;
@@ -1935,20 +1970,22 @@ static int dvb_register(struct cx23885_tsport *port)
 				break;
 
 			/* attach tuner */
-			memset(&ts2020_config, 0, sizeof(ts2020_config));
-			ts2020_config.fe = fe0->dvb.frontend;
-			ts2020_config.get_agc_pwm = m88ds3103_get_agc_pwm;
+			I2C_ZALLOC_PLATFORM_DATA(ts2020_config, goto frontend_detach);
+			ts2020_config->fe = fe0->dvb.frontend;
+			ts2020_config->get_agc_pwm = m88ds3103_get_agc_pwm;
 			memset(&info, 0, sizeof(struct i2c_board_info));
 			strlcpy(info.type, "ts2020", I2C_NAME_SIZE);
 			info.addr = 0x60;
-			info.platform_data = &ts2020_config;
+			info.platform_data = ts2020_config;
 			request_module(info.type);
 			client_tuner = i2c_new_device(adapter, &info);
 			if (client_tuner == NULL ||
-					client_tuner->dev.driver == NULL)
+					client_tuner->dev.driver == NULL) {
+				kfree(ts2020_config);
 				goto frontend_detach;
+			}
 			if (!try_module_get(client_tuner->dev.driver->owner)) {
-				i2c_unregister_device(client_tuner);
+				cx23885_i2c_unregister_device(client_tuner);
 				goto frontend_detach;
 			}
 
@@ -1971,41 +2008,44 @@ static int dvb_register(struct cx23885_tsport *port)
 		/* port c - terrestrial/cable */
 		case 2:
 			/* attach frontend */
-			memset(&si2168_config, 0, sizeof(si2168_config));
-			si2168_config.i2c_adapter = &adapter;
-			si2168_config.fe = &fe0->dvb.frontend;
-			si2168_config.ts_mode = SI2168_TS_SERIAL;
+			I2C_ZALLOC_PLATFORM_DATA(si2168_config, goto frontend_detach);
+			si2168_config->i2c_adapter = &adapter;
+			si2168_config->fe = &fe0->dvb.frontend;
+			si2168_config->ts_mode = SI2168_TS_SERIAL;
 			memset(&info, 0, sizeof(struct i2c_board_info));
 			strlcpy(info.type, "si2168", I2C_NAME_SIZE);
 			info.addr = 0x64;
-			info.platform_data = &si2168_config;
+			info.platform_data = si2168_config;
 			request_module(info.type);
 			client_demod = i2c_new_device(&i2c_bus->i2c_adap, &info);
 			if (client_demod == NULL ||
-					client_demod->dev.driver == NULL)
+					client_demod->dev.driver == NULL) {
+				kfree(si2168_config);
 				goto frontend_detach;
+			}
 			if (!try_module_get(client_demod->dev.driver->owner)) {
-				i2c_unregister_device(client_demod);
+				cx23885_i2c_unregister_device(client_demod);
 				goto frontend_detach;
 			}
 			port->i2c_client_demod = client_demod;
 
 			/* attach tuner */
-			memset(&si2157_config, 0, sizeof(si2157_config));
-			si2157_config.fe = fe0->dvb.frontend;
-			si2157_config.if_port = 1;
+			I2C_ZALLOC_PLATFORM_DATA(si2157_config, goto frontend_detach);
+			si2157_config->fe = fe0->dvb.frontend;
+			si2157_config->if_port = 1;
 			memset(&info, 0, sizeof(struct i2c_board_info));
 			strlcpy(info.type, "si2157", I2C_NAME_SIZE);
 			info.addr = 0x60;
-			info.platform_data = &si2157_config;
+			info.platform_data = si2157_config;
 			request_module(info.type);
 			client_tuner = i2c_new_device(adapter, &info);
 			if (client_tuner == NULL ||
-					client_tuner->dev.driver == NULL)
+					client_tuner->dev.driver == NULL) {
+				kfree(si2157_config);
 				goto frontend_detach;
-
+			}
 			if (!try_module_get(client_tuner->dev.driver->owner)) {
-				i2c_unregister_device(client_tuner);
+				cx23885_i2c_unregister_device(client_tuner);
 				goto frontend_detach;
 			}
 			port->i2c_client_tuner = client_tuner;
@@ -2018,39 +2058,43 @@ static int dvb_register(struct cx23885_tsport *port)
 		i2c_bus2 = &dev->i2c_bus[1];
 
 		/* attach frontend */
-		memset(&si2168_config, 0, sizeof(si2168_config));
-		si2168_config.i2c_adapter = &adapter;
-		si2168_config.fe = &fe0->dvb.frontend;
-		si2168_config.ts_mode = SI2168_TS_PARALLEL;
+		I2C_ZALLOC_PLATFORM_DATA(si2168_config, goto frontend_detach);
+		si2168_config->i2c_adapter = &adapter;
+		si2168_config->fe = &fe0->dvb.frontend;
+		si2168_config->ts_mode = SI2168_TS_PARALLEL;
 		memset(&info, 0, sizeof(struct i2c_board_info));
 		strlcpy(info.type, "si2168", I2C_NAME_SIZE);
 		info.addr = 0x64;
-		info.platform_data = &si2168_config;
+		info.platform_data = si2168_config;
 		request_module(info.type);
 		client_demod = i2c_new_device(&i2c_bus2->i2c_adap, &info);
-		if (client_demod == NULL || client_demod->dev.driver == NULL)
+		if (client_demod == NULL || client_demod->dev.driver == NULL) {
+			kfree(si2168_config);
 			goto frontend_detach;
+		}
 		if (!try_module_get(client_demod->dev.driver->owner)) {
-			i2c_unregister_device(client_demod);
+			cx23885_i2c_unregister_device(client_demod);
 			goto frontend_detach;
 		}
 		port->i2c_client_demod = client_demod;
 
 		/* attach tuner */
-		memset(&si2157_config, 0, sizeof(si2157_config));
-		si2157_config.fe = fe0->dvb.frontend;
-		si2157_config.if_port = 1;
+		I2C_ZALLOC_PLATFORM_DATA(si2157_config, goto frontend_detach);
+		si2157_config->fe = fe0->dvb.frontend;
+		si2157_config->if_port = 1;
 		memset(&info, 0, sizeof(struct i2c_board_info));
 		strlcpy(info.type, "si2157", I2C_NAME_SIZE);
 		info.addr = 0x60;
-		info.platform_data = &si2157_config;
+		info.platform_data = si2157_config;
 		request_module(info.type);
 		client_tuner = i2c_new_device(adapter, &info);
 		if (client_tuner == NULL ||
-				client_tuner->dev.driver == NULL)
+				client_tuner->dev.driver == NULL) {
+			kfree(si2157_config);
 			goto frontend_detach;
+		}
 		if (!try_module_get(client_tuner->dev.driver->owner)) {
-			i2c_unregister_device(client_tuner);
+			cx23885_i2c_unregister_device(client_tuner);
 			goto frontend_detach;
 		}
 		port->i2c_client_tuner = client_tuner;
@@ -2067,19 +2111,21 @@ static int dvb_register(struct cx23885_tsport *port)
 			break;
 
 		/* attach tuner */
-		memset(&ts2020_config, 0, sizeof(ts2020_config));
-		ts2020_config.fe = fe0->dvb.frontend;
-		ts2020_config.get_agc_pwm = m88ds3103_get_agc_pwm;
+		I2C_ZALLOC_PLATFORM_DATA(ts2020_config, goto frontend_detach);
+		ts2020_config->fe = fe0->dvb.frontend;
+		ts2020_config->get_agc_pwm = m88ds3103_get_agc_pwm;
 		memset(&info, 0, sizeof(struct i2c_board_info));
 		strlcpy(info.type, "ts2020", I2C_NAME_SIZE);
 		info.addr = 0x60;
-		info.platform_data = &ts2020_config;
+		info.platform_data = ts2020_config;
 		request_module(info.type);
 		client_tuner = i2c_new_device(adapter, &info);
-		if (client_tuner == NULL || client_tuner->dev.driver == NULL)
+		if (client_tuner == NULL || client_tuner->dev.driver == NULL) {
+			kfree(ts2020_config);
 			goto frontend_detach;
+		}
 		if (!try_module_get(client_tuner->dev.driver->owner)) {
-			i2c_unregister_device(client_tuner);
+			cx23885_i2c_unregister_device(client_tuner);
 			goto frontend_detach;
 		}
 
@@ -2091,64 +2137,71 @@ static int dvb_register(struct cx23885_tsport *port)
 		break;
 	case CX23885_BOARD_DVBSKY_S952:
 		/* attach frontend */
-		memset(&m88ds3103_pdata, 0, sizeof(m88ds3103_pdata));
-		m88ds3103_pdata.clk = 27000000;
-		m88ds3103_pdata.i2c_wr_max = 33;
-		m88ds3103_pdata.agc = 0x99;
-		m88ds3103_pdata.clk_out = M88DS3103_CLOCK_OUT_DISABLED;
-		m88ds3103_pdata.lnb_en_pol = 1;
+		if (port->nr != 1 && port->nr != 2)
+			return 0;
+		I2C_ZALLOC_PLATFORM_DATA(m88ds3103_pdata, goto frontend_detach);
+		m88ds3103_pdata->clk = 27000000;
+		m88ds3103_pdata->i2c_wr_max = 33;
+		m88ds3103_pdata->agc = 0x99;
+		m88ds3103_pdata->clk_out = M88DS3103_CLOCK_OUT_DISABLED;
+		m88ds3103_pdata->lnb_en_pol = 1;
 
 		switch (port->nr) {
 		/* port b */
 		case 1:
 			i2c_bus = &dev->i2c_bus[1];
-			m88ds3103_pdata.ts_mode = M88DS3103_TS_PARALLEL;
-			m88ds3103_pdata.ts_clk = 16000;
-			m88ds3103_pdata.ts_clk_pol = 1;
+			m88ds3103_pdata->ts_mode = M88DS3103_TS_PARALLEL;
+			m88ds3103_pdata->ts_clk = 16000;
+			m88ds3103_pdata->ts_clk_pol = 1;
 			p_set_voltage = dvbsky_t9580_set_voltage;
 			break;
 		/* port c */
 		case 2:
 			i2c_bus = &dev->i2c_bus[0];
-			m88ds3103_pdata.ts_mode = M88DS3103_TS_SERIAL;
-			m88ds3103_pdata.ts_clk = 96000;
-			m88ds3103_pdata.ts_clk_pol = 0;
+			m88ds3103_pdata->ts_mode = M88DS3103_TS_SERIAL;
+			m88ds3103_pdata->ts_clk = 96000;
+			m88ds3103_pdata->ts_clk_pol = 0;
 			p_set_voltage = dvbsky_s952_portc_set_voltage;
 			break;
 		default:
+			/* this will never happen due to check above */
 			return 0;
 		}
 
 		memset(&info, 0, sizeof(info));
 		strlcpy(info.type, "m88ds3103", I2C_NAME_SIZE);
 		info.addr = 0x68;
-		info.platform_data = &m88ds3103_pdata;
+		info.platform_data = m88ds3103_pdata;
 		request_module(info.type);
 		client_demod = i2c_new_device(&i2c_bus->i2c_adap, &info);
-		if (client_demod == NULL || client_demod->dev.driver == NULL)
+		if (client_demod == NULL || client_demod->dev.driver == NULL) {
+			kfree(m88ds3103_pdata);
 			goto frontend_detach;
+		}
 		if (!try_module_get(client_demod->dev.driver->owner)) {
-			i2c_unregister_device(client_demod);
+			cx23885_i2c_unregister_device(client_demod);
 			goto frontend_detach;
 		}
 		port->i2c_client_demod = client_demod;
-		adapter = m88ds3103_pdata.get_i2c_adapter(client_demod);
-		fe0->dvb.frontend = m88ds3103_pdata.get_dvb_frontend(client_demod);
+		adapter = m88ds3103_pdata->get_i2c_adapter(client_demod);
+		fe0->dvb.frontend = m88ds3103_pdata->get_dvb_frontend(client_demod);
 
 		/* attach tuner */
-		memset(&ts2020_config, 0, sizeof(ts2020_config));
-		ts2020_config.fe = fe0->dvb.frontend;
-		ts2020_config.get_agc_pwm = m88ds3103_get_agc_pwm;
+		I2C_ZALLOC_PLATFORM_DATA(ts2020_config, goto frontend_detach);
+		ts2020_config->fe = fe0->dvb.frontend;
+		ts2020_config->get_agc_pwm = m88ds3103_get_agc_pwm;
 		memset(&info, 0, sizeof(struct i2c_board_info));
 		strlcpy(info.type, "ts2020", I2C_NAME_SIZE);
 		info.addr = 0x60;
-		info.platform_data = &ts2020_config;
+		info.platform_data = ts2020_config;
 		request_module(info.type);
 		client_tuner = i2c_new_device(adapter, &info);
-		if (client_tuner == NULL || client_tuner->dev.driver == NULL)
+		if (client_tuner == NULL || client_tuner->dev.driver == NULL) {
+			kfree(ts2020_config);
 			goto frontend_detach;
+		}
 		if (!try_module_get(client_tuner->dev.driver->owner)) {
-			i2c_unregister_device(client_tuner);
+			cx23885_i2c_unregister_device(client_tuner);
 			goto frontend_detach;
 		}
 
@@ -2167,59 +2220,63 @@ static int dvb_register(struct cx23885_tsport *port)
 		port->i2c_client_tuner = client_tuner;
 		break;
 	case CX23885_BOARD_DVBSKY_T982:
-		memset(&si2168_config, 0, sizeof(si2168_config));
+		I2C_ZALLOC_PLATFORM_DATA(si2168_config, goto frontend_detach);
 		switch (port->nr) {
 		/* port b */
 		case 1:
 			i2c_bus = &dev->i2c_bus[1];
-			si2168_config.ts_mode = SI2168_TS_PARALLEL;
+			si2168_config->ts_mode = SI2168_TS_PARALLEL;
 			break;
 		/* port c */
 		case 2:
 			i2c_bus = &dev->i2c_bus[0];
-			si2168_config.ts_mode = SI2168_TS_SERIAL;
+			si2168_config->ts_mode = SI2168_TS_SERIAL;
 			break;
 		}
 
 		/* attach frontend */
-		si2168_config.i2c_adapter = &adapter;
-		si2168_config.fe = &fe0->dvb.frontend;
+		si2168_config->i2c_adapter = &adapter;
+		si2168_config->fe = &fe0->dvb.frontend;
 		memset(&info, 0, sizeof(struct i2c_board_info));
 		strlcpy(info.type, "si2168", I2C_NAME_SIZE);
 		info.addr = 0x64;
-		info.platform_data = &si2168_config;
+		info.platform_data = si2168_config;
 		request_module(info.type);
 		client_demod = i2c_new_device(&i2c_bus->i2c_adap, &info);
-		if (client_demod == NULL || client_demod->dev.driver == NULL)
+		if (client_demod == NULL || client_demod->dev.driver == NULL) {
+			kfree(si2168_config);
 			goto frontend_detach;
+		}
 		if (!try_module_get(client_demod->dev.driver->owner)) {
-			i2c_unregister_device(client_demod);
+			cx23885_i2c_unregister_device(client_demod);
 			goto frontend_detach;
 		}
 		port->i2c_client_demod = client_demod;
 
 		/* attach tuner */
-		memset(&si2157_config, 0, sizeof(si2157_config));
-		si2157_config.fe = fe0->dvb.frontend;
-		si2157_config.if_port = 1;
+		I2C_ZALLOC_PLATFORM_DATA(si2157_config, goto frontend_detach);
+		si2157_config->fe = fe0->dvb.frontend;
+		si2157_config->if_port = 1;
 		memset(&info, 0, sizeof(struct i2c_board_info));
 		strlcpy(info.type, "si2157", I2C_NAME_SIZE);
 		info.addr = 0x60;
-		info.platform_data = &si2157_config;
+		info.platform_data = si2157_config;
 		request_module(info.type);
 		client_tuner = i2c_new_device(adapter, &info);
 		if (client_tuner == NULL ||
-				client_tuner->dev.driver == NULL)
+				client_tuner->dev.driver == NULL) {
+			kfree(si2157_config);
 			goto frontend_detach;
+		}
 		if (!try_module_get(client_tuner->dev.driver->owner)) {
-			i2c_unregister_device(client_tuner);
+			cx23885_i2c_unregister_device(client_tuner);
 			goto frontend_detach;
 		}
 		port->i2c_client_tuner = client_tuner;
 		break;
 	case CX23885_BOARD_HAUPPAUGE_HVR5525: {
-		struct m88rs6000t_config m88rs6000t_config;
-		struct a8293_platform_data a8293_pdata = {};
+		struct m88rs6000t_config *m88rs6000t_config;
+		struct a8293_platform_data *a8293_pdata;
 
 		switch (port->nr) {
 
@@ -2233,34 +2290,39 @@ static int dvb_register(struct cx23885_tsport *port)
 				break;
 
 			/* attach SEC */
-			a8293_pdata.dvb_frontend = fe0->dvb.frontend;
+			I2C_ZALLOC_PLATFORM_DATA(a8293_pdata, goto frontend_detach);
+			a8293_pdata->dvb_frontend = fe0->dvb.frontend;
 			memset(&info, 0, sizeof(info));
 			strlcpy(info.type, "a8293", I2C_NAME_SIZE);
 			info.addr = 0x0b;
-			info.platform_data = &a8293_pdata;
+			info.platform_data = a8293_pdata;
 			request_module("a8293");
 			client_sec = i2c_new_device(&dev->i2c_bus[0].i2c_adap, &info);
-			if (!client_sec || !client_sec->dev.driver)
+			if (!client_sec || !client_sec->dev.driver) {
+				kfree(a8293_pdata);
 				goto frontend_detach;
+			}
 			if (!try_module_get(client_sec->dev.driver->owner)) {
-				i2c_unregister_device(client_sec);
+				cx23885_i2c_unregister_device(client_sec);
 				goto frontend_detach;
 			}
 			port->i2c_client_sec = client_sec;
 
 			/* attach tuner */
-			memset(&m88rs6000t_config, 0, sizeof(m88rs6000t_config));
-			m88rs6000t_config.fe = fe0->dvb.frontend;
+			I2C_ZALLOC_PLATFORM_DATA(m88rs6000t_config, goto frontend_detach);
+			m88rs6000t_config->fe = fe0->dvb.frontend;
 			memset(&info, 0, sizeof(struct i2c_board_info));
 			strlcpy(info.type, "m88rs6000t", I2C_NAME_SIZE);
 			info.addr = 0x21;
-			info.platform_data = &m88rs6000t_config;
+			info.platform_data = m88rs6000t_config;
 			request_module("%s", info.type);
 			client_tuner = i2c_new_device(adapter, &info);
-			if (!client_tuner || !client_tuner->dev.driver)
+			if (!client_tuner || !client_tuner->dev.driver) {
+				kfree(m88rs6000t_config);
 				goto frontend_detach;
+			}
 			if (!try_module_get(client_tuner->dev.driver->owner)) {
-				i2c_unregister_device(client_tuner);
+				cx23885_i2c_unregister_device(client_tuner);
 				goto frontend_detach;
 			}
 			port->i2c_client_tuner = client_tuner;
@@ -2272,44 +2334,47 @@ static int dvb_register(struct cx23885_tsport *port)
 		/* port c - terrestrial/cable */
 		case 2:
 			/* attach frontend */
-			memset(&si2168_config, 0, sizeof(si2168_config));
-			si2168_config.i2c_adapter = &adapter;
-			si2168_config.fe = &fe0->dvb.frontend;
-			si2168_config.ts_mode = SI2168_TS_SERIAL;
+			I2C_ZALLOC_PLATFORM_DATA(si2168_config, goto frontend_detach);
+			si2168_config->i2c_adapter = &adapter;
+			si2168_config->fe = &fe0->dvb.frontend;
+			si2168_config->ts_mode = SI2168_TS_SERIAL;
 			memset(&info, 0, sizeof(struct i2c_board_info));
 			strlcpy(info.type, "si2168", I2C_NAME_SIZE);
 			info.addr = 0x64;
-			info.platform_data = &si2168_config;
+			info.platform_data = si2168_config;
 			request_module("%s", info.type);
 			client_demod = i2c_new_device(&dev->i2c_bus[0].i2c_adap, &info);
-			if (!client_demod || !client_demod->dev.driver)
+			if (!client_demod || !client_demod->dev.driver) {
+				kfree(si2168_config);
 				goto frontend_detach;
+			}
 			if (!try_module_get(client_demod->dev.driver->owner)) {
-				i2c_unregister_device(client_demod);
+				cx23885_i2c_unregister_device(client_demod);
 				goto frontend_detach;
 			}
 			port->i2c_client_demod = client_demod;
 
 			/* attach tuner */
-			memset(&si2157_config, 0, sizeof(si2157_config));
-			si2157_config.fe = fe0->dvb.frontend;
-			si2157_config.if_port = 1;
+			I2C_ZALLOC_PLATFORM_DATA(si2157_config, goto frontend_detach);
+			si2157_config->fe = fe0->dvb.frontend;
+			si2157_config->if_port = 1;
 			memset(&info, 0, sizeof(struct i2c_board_info));
 			strlcpy(info.type, "si2157", I2C_NAME_SIZE);
 			info.addr = 0x60;
-			info.platform_data = &si2157_config;
+			info.platform_data = si2157_config;
 			request_module("%s", info.type);
 			client_tuner = i2c_new_device(&dev->i2c_bus[1].i2c_adap, &info);
 			if (!client_tuner || !client_tuner->dev.driver) {
+				kfree(si2157_config);
 				module_put(client_demod->dev.driver->owner);
-				i2c_unregister_device(client_demod);
+				cx23885_i2c_unregister_device(client_demod);
 				port->i2c_client_demod = NULL;
 				goto frontend_detach;
 			}
 			if (!try_module_get(client_tuner->dev.driver->owner)) {
-				i2c_unregister_device(client_tuner);
+				cx23885_i2c_unregister_device(client_tuner);
 				module_put(client_demod->dev.driver->owner);
-				i2c_unregister_device(client_demod);
+				cx23885_i2c_unregister_device(client_demod);
 				port->i2c_client_demod = NULL;
 				goto frontend_detach;
 			}
@@ -2323,44 +2388,47 @@ static int dvb_register(struct cx23885_tsport *port)
 		/* port b - Terrestrial/cable */
 		case 1:
 			/* attach frontend */
-			memset(&si2168_config, 0, sizeof(si2168_config));
-			si2168_config.i2c_adapter = &adapter;
-			si2168_config.fe = &fe0->dvb.frontend;
-			si2168_config.ts_mode = SI2168_TS_SERIAL;
+			I2C_ZALLOC_PLATFORM_DATA(si2168_config, goto frontend_detach);
+			si2168_config->i2c_adapter = &adapter;
+			si2168_config->fe = &fe0->dvb.frontend;
+			si2168_config->ts_mode = SI2168_TS_SERIAL;
 			memset(&info, 0, sizeof(struct i2c_board_info));
 			strlcpy(info.type, "si2168", I2C_NAME_SIZE);
 			info.addr = 0x64;
-			info.platform_data = &si2168_config;
+			info.platform_data = si2168_config;
 			request_module("%s", info.type);
 			client_demod = i2c_new_device(&dev->i2c_bus[0].i2c_adap, &info);
-			if (!client_demod || !client_demod->dev.driver)
+			if (!client_demod || !client_demod->dev.driver) {
+				kfree(si2168_config);
 				goto frontend_detach;
+			}
 			if (!try_module_get(client_demod->dev.driver->owner)) {
-				i2c_unregister_device(client_demod);
+				cx23885_i2c_unregister_device(client_demod);
 				goto frontend_detach;
 			}
 			port->i2c_client_demod = client_demod;
 
 			/* attach tuner */
-			memset(&si2157_config, 0, sizeof(si2157_config));
-			si2157_config.fe = fe0->dvb.frontend;
-			si2157_config.if_port = 1;
+			I2C_ZALLOC_PLATFORM_DATA(si2157_config, goto frontend_detach);
+			si2157_config->fe = fe0->dvb.frontend;
+			si2157_config->if_port = 1;
 			memset(&info, 0, sizeof(struct i2c_board_info));
 			strlcpy(info.type, "si2157", I2C_NAME_SIZE);
 			info.addr = 0x60;
-			info.platform_data = &si2157_config;
+			info.platform_data = si2157_config;
 			request_module("%s", info.type);
 			client_tuner = i2c_new_device(&dev->i2c_bus[1].i2c_adap, &info);
 			if (!client_tuner || !client_tuner->dev.driver) {
+				kfree(si2157_config);
 				module_put(client_demod->dev.driver->owner);
-				i2c_unregister_device(client_demod);
+				cx23885_i2c_unregister_device(client_demod);
 				port->i2c_client_demod = NULL;
 				goto frontend_detach;
 			}
 			if (!try_module_get(client_tuner->dev.driver->owner)) {
-				i2c_unregister_device(client_tuner);
+				cx23885_i2c_unregister_device(client_tuner);
 				module_put(client_demod->dev.driver->owner);
-				i2c_unregister_device(client_demod);
+				cx23885_i2c_unregister_device(client_demod);
 				port->i2c_client_demod = NULL;
 				goto frontend_detach;
 			}
@@ -2370,44 +2438,47 @@ static int dvb_register(struct cx23885_tsport *port)
 		/* port c - terrestrial/cable */
 		case 2:
 			/* attach frontend */
-			memset(&si2168_config, 0, sizeof(si2168_config));
-			si2168_config.i2c_adapter = &adapter;
-			si2168_config.fe = &fe0->dvb.frontend;
-			si2168_config.ts_mode = SI2168_TS_SERIAL;
+			I2C_ZALLOC_PLATFORM_DATA(si2168_config, goto frontend_detach);
+			si2168_config->i2c_adapter = &adapter;
+			si2168_config->fe = &fe0->dvb.frontend;
+			si2168_config->ts_mode = SI2168_TS_SERIAL;
 			memset(&info, 0, sizeof(struct i2c_board_info));
 			strlcpy(info.type, "si2168", I2C_NAME_SIZE);
 			info.addr = 0x66;
-			info.platform_data = &si2168_config;
+			info.platform_data = si2168_config;
 			request_module("%s", info.type);
 			client_demod = i2c_new_device(&dev->i2c_bus[0].i2c_adap, &info);
-			if (!client_demod || !client_demod->dev.driver)
+			if (!client_demod || !client_demod->dev.driver) {
+				kfree(si2168_config);
 				goto frontend_detach;
+			}
 			if (!try_module_get(client_demod->dev.driver->owner)) {
-				i2c_unregister_device(client_demod);
+				cx23885_i2c_unregister_device(client_demod);
 				goto frontend_detach;
 			}
 			port->i2c_client_demod = client_demod;
 
 			/* attach tuner */
-			memset(&si2157_config, 0, sizeof(si2157_config));
-			si2157_config.fe = fe0->dvb.frontend;
-			si2157_config.if_port = 1;
+			I2C_ZALLOC_PLATFORM_DATA(si2157_config, goto frontend_detach);
+			si2157_config->fe = fe0->dvb.frontend;
+			si2157_config->if_port = 1;
 			memset(&info, 0, sizeof(struct i2c_board_info));
 			strlcpy(info.type, "si2157", I2C_NAME_SIZE);
 			info.addr = 0x62;
-			info.platform_data = &si2157_config;
+			info.platform_data = si2157_config;
 			request_module("%s", info.type);
 			client_tuner = i2c_new_device(&dev->i2c_bus[1].i2c_adap, &info);
 			if (!client_tuner || !client_tuner->dev.driver) {
+				kfree(si2157_config);
 				module_put(client_demod->dev.driver->owner);
-				i2c_unregister_device(client_demod);
+				cx23885_i2c_unregister_device(client_demod);
 				port->i2c_client_demod = NULL;
 				goto frontend_detach;
 			}
 			if (!try_module_get(client_tuner->dev.driver->owner)) {
-				i2c_unregister_device(client_tuner);
+				cx23885_i2c_unregister_device(client_tuner);
 				module_put(client_demod->dev.driver->owner);
-				i2c_unregister_device(client_demod);
+				cx23885_i2c_unregister_device(client_demod);
 				port->i2c_client_demod = NULL;
 				goto frontend_detach;
 			}
@@ -2427,26 +2498,27 @@ static int dvb_register(struct cx23885_tsport *port)
 				break;
 
 			/* attach tuner */
-			memset(&si2157_config, 0, sizeof(si2157_config));
-			si2157_config.fe = fe0->dvb.frontend;
-			si2157_config.if_port = 1;
-			si2157_config.inversion = 1;
+			I2C_ZALLOC_PLATFORM_DATA(si2157_config, goto frontend_detach);
+			si2157_config->fe = fe0->dvb.frontend;
+			si2157_config->if_port = 1;
+			si2157_config->inversion = 1;
 			memset(&info, 0, sizeof(struct i2c_board_info));
 			strlcpy(info.type, "si2157", I2C_NAME_SIZE);
 			info.addr = 0x60;
-			info.platform_data = &si2157_config;
+			info.platform_data = si2157_config;
 			request_module("%s", info.type);
 			client_tuner = i2c_new_device(&dev->i2c_bus[1].i2c_adap, &info);
 			if (!client_tuner || !client_tuner->dev.driver) {
+				kfree(si2157_config);
 				module_put(client_demod->dev.driver->owner);
-				i2c_unregister_device(client_demod);
+				cx23885_i2c_unregister_device(client_demod);
 				port->i2c_client_demod = NULL;
 				goto frontend_detach;
 			}
 			if (!try_module_get(client_tuner->dev.driver->owner)) {
-				i2c_unregister_device(client_tuner);
+				cx23885_i2c_unregister_device(client_tuner);
 				module_put(client_demod->dev.driver->owner);
-				i2c_unregister_device(client_demod);
+				cx23885_i2c_unregister_device(client_demod);
 				port->i2c_client_demod = NULL;
 				goto frontend_detach;
 			}
@@ -2463,26 +2535,27 @@ static int dvb_register(struct cx23885_tsport *port)
 				break;
 
 			/* attach tuner */
-			memset(&si2157_config, 0, sizeof(si2157_config));
-			si2157_config.fe = fe0->dvb.frontend;
-			si2157_config.if_port = 1;
-			si2157_config.inversion = 1;
+			I2C_ZALLOC_PLATFORM_DATA(si2157_config, goto frontend_detach);
+			si2157_config->fe = fe0->dvb.frontend;
+			si2157_config->if_port = 1;
+			si2157_config->inversion = 1;
 			memset(&info, 0, sizeof(struct i2c_board_info));
 			strlcpy(info.type, "si2157", I2C_NAME_SIZE);
 			info.addr = 0x62;
-			info.platform_data = &si2157_config;
+			info.platform_data = si2157_config;
 			request_module("%s", info.type);
 			client_tuner = i2c_new_device(&dev->i2c_bus[1].i2c_adap, &info);
 			if (!client_tuner || !client_tuner->dev.driver) {
+				kfree(si2157_config);
 				module_put(client_demod->dev.driver->owner);
-				i2c_unregister_device(client_demod);
+				cx23885_i2c_unregister_device(client_demod);
 				port->i2c_client_demod = NULL;
 				goto frontend_detach;
 			}
 			if (!try_module_get(client_tuner->dev.driver->owner)) {
-				i2c_unregister_device(client_tuner);
+				cx23885_i2c_unregister_device(client_tuner);
 				module_put(client_demod->dev.driver->owner);
-				i2c_unregister_device(client_demod);
+				cx23885_i2c_unregister_device(client_demod);
 				port->i2c_client_demod = NULL;
 				goto frontend_detach;
 			}
@@ -2538,7 +2611,7 @@ static int dvb_register(struct cx23885_tsport *port)
 	client_sec = port->i2c_client_sec;
 	if (client_sec) {
 		module_put(client_sec->dev.driver->owner);
-		i2c_unregister_device(client_sec);
+		cx23885_i2c_unregister_device(client_sec);
 		port->i2c_client_sec = NULL;
 	}
 
@@ -2546,7 +2619,7 @@ static int dvb_register(struct cx23885_tsport *port)
 	client_tuner = port->i2c_client_tuner;
 	if (client_tuner) {
 		module_put(client_tuner->dev.driver->owner);
-		i2c_unregister_device(client_tuner);
+		cx23885_i2c_unregister_device(client_tuner);
 		port->i2c_client_tuner = NULL;
 	}
 
@@ -2554,7 +2627,7 @@ static int dvb_register(struct cx23885_tsport *port)
 	client_demod = port->i2c_client_demod;
 	if (client_demod) {
 		module_put(client_demod->dev.driver->owner);
-		i2c_unregister_device(client_demod);
+		cx23885_i2c_unregister_device(client_demod);
 		port->i2c_client_demod = NULL;
 	}
 
@@ -2641,28 +2714,28 @@ int cx23885_dvb_unregister(struct cx23885_tsport *port)
 	client = port->i2c_client_ci;
 	if (client) {
 		module_put(client->dev.driver->owner);
-		i2c_unregister_device(client);
+		cx23885_i2c_unregister_device(client);
 	}
 
 	/* remove I2C client for SEC */
 	client = port->i2c_client_sec;
 	if (client) {
 		module_put(client->dev.driver->owner);
-		i2c_unregister_device(client);
+		cx23885_i2c_unregister_device(client);
 	}
 
 	/* remove I2C client for tuner */
 	client = port->i2c_client_tuner;
 	if (client) {
 		module_put(client->dev.driver->owner);
-		i2c_unregister_device(client);
+		cx23885_i2c_unregister_device(client);
 	}
 
 	/* remove I2C client for demodulator */
 	client = port->i2c_client_demod;
 	if (client) {
 		module_put(client->dev.driver->owner);
-		i2c_unregister_device(client);
+		cx23885_i2c_unregister_device(client);
 	}
 
 	fe0 = vb2_dvb_get_frontend(&port->frontends, 1);
diff --git a/drivers/media/usb/cx231xx/cx231xx-dvb.c b/drivers/media/usb/cx231xx/cx231xx-dvb.c
index ee3eeeb600f8..17e253a11466 100644
--- a/drivers/media/usb/cx231xx/cx231xx-dvb.c
+++ b/drivers/media/usb/cx231xx/cx231xx-dvb.c
@@ -173,6 +173,23 @@ static struct r820t_config astrometa_t2hybrid_r820t_config = {
 	.max_i2c_msg_len	= 2,
 };
 
+#define I2C_ZALLOC_PLATFORM_DATA(ptr, failure...) \
+	do { \
+		ptr = kzalloc(sizeof(*ptr), GFP_KERNEL); \
+		pr_info("i2c priv alloc " #ptr " = %p\n", ptr); \
+		if (ptr == NULL) { failure; } \
+	} while(0)
+
+static void cx231xx_i2c_unregister_device(struct i2c_client *client)
+{
+	pr_info("i2c priv free %p\n", client->dev.platform_data);
+	if (client->dev.platform_data) {
+		kfree(client->dev.platform_data);
+		client->dev.platform_data = NULL;
+	}
+	i2c_unregister_device(client);
+}
+
 static inline void print_err_status(struct cx231xx *dev, int packet, int status)
 {
 	char *errmsg = "Unknown";
@@ -589,13 +606,13 @@ static void unregister_dvb(struct cx231xx_dvb *dvb)
 	client = dvb->i2c_client_tuner;
 	if (client) {
 		module_put(client->dev.driver->owner);
-		i2c_unregister_device(client);
+		cx231xx_i2c_unregister_device(client);
 	}
 	/* remove I2C demod */
 	client = dvb->i2c_client_demod;
 	if (client) {
 		module_put(client->dev.driver->owner);
-		i2c_unregister_device(client);
+		cx231xx_i2c_unregister_device(client);
 	}
 	dvb_unregister_frontend(dvb->frontend);
 	dvb_frontend_detach(dvb->frontend);
@@ -757,21 +774,22 @@ static int dvb_init(struct cx231xx *dev)
 	{
 		struct i2c_client *client;
 		struct i2c_board_info info;
-		struct si2165_platform_data si2165_pdata;
+		struct si2165_platform_data *si2165_pdata;
 
 		/* attach demod */
-		memset(&si2165_pdata, 0, sizeof(si2165_pdata));
-		si2165_pdata.fe = &dev->dvb->frontend;
-		si2165_pdata.chip_mode = SI2165_MODE_PLL_XTAL,
-		si2165_pdata.ref_freq_Hz = 16000000,
+		I2C_ZALLOC_PLATFORM_DATA(si2165_pdata, goto out_free);
+		si2165_pdata->fe = &dev->dvb->frontend;
+		si2165_pdata->chip_mode = SI2165_MODE_PLL_XTAL,
+		si2165_pdata->ref_freq_Hz = 16000000,
 
 		memset(&info, 0, sizeof(struct i2c_board_info));
 		strlcpy(info.type, "si2165", I2C_NAME_SIZE);
 		info.addr = 0x64;
-		info.platform_data = &si2165_pdata;
+		info.platform_data = si2165_pdata;
 		request_module(info.type);
 		client = i2c_new_device(demod_i2c, &info);
 		if (client == NULL || client->dev.driver == NULL || dev->dvb->frontend == NULL) {
+			kfree(si2165_pdata);
 			dev_err(dev->dev,
 				"Failed to attach SI2165 front end\n");
 			result = -EINVAL;
@@ -779,7 +797,7 @@ static int dvb_init(struct cx231xx *dev)
 		}
 
 		if (!try_module_get(client->dev.driver->owner)) {
-			i2c_unregister_device(client);
+			cx231xx_i2c_unregister_device(client);
 			result = -ENODEV;
 			goto out_free;
 		}
@@ -803,22 +821,23 @@ static int dvb_init(struct cx231xx *dev)
 	{
 		struct i2c_client *client;
 		struct i2c_board_info info;
-		struct si2165_platform_data si2165_pdata;
-		struct si2157_config si2157_config;
+		struct si2165_platform_data *si2165_pdata;
+		struct si2157_config *si2157_config;
 
 		/* attach demod */
-		memset(&si2165_pdata, 0, sizeof(si2165_pdata));
-		si2165_pdata.fe = &dev->dvb->frontend;
-		si2165_pdata.chip_mode = SI2165_MODE_PLL_EXT,
-		si2165_pdata.ref_freq_Hz = 24000000,
+		I2C_ZALLOC_PLATFORM_DATA(si2165_pdata, goto out_free);
+		si2165_pdata->fe = &dev->dvb->frontend;
+		si2165_pdata->chip_mode = SI2165_MODE_PLL_EXT,
+		si2165_pdata->ref_freq_Hz = 24000000,
 
 		memset(&info, 0, sizeof(struct i2c_board_info));
 		strlcpy(info.type, "si2165", I2C_NAME_SIZE);
 		info.addr = 0x64;
-		info.platform_data = &si2165_pdata;
+		info.platform_data = si2165_pdata;
 		request_module(info.type);
 		client = i2c_new_device(demod_i2c, &info);
 		if (client == NULL || client->dev.driver == NULL || dev->dvb->frontend == NULL) {
+			kfree(si2165_pdata);
 			dev_err(dev->dev,
 				"Failed to attach SI2165 front end\n");
 			result = -EINVAL;
@@ -826,7 +845,7 @@ static int dvb_init(struct cx231xx *dev)
 		}
 
 		if (!try_module_get(client->dev.driver->owner)) {
-			i2c_unregister_device(client);
+			cx231xx_i2c_unregister_device(client);
 			result = -ENODEV;
 			goto out_free;
 		}
@@ -841,29 +860,30 @@ static int dvb_init(struct cx231xx *dev)
 		dvb->frontend->callback = cx231xx_tuner_callback;
 
 		/* attach tuner */
-		memset(&si2157_config, 0, sizeof(si2157_config));
-		si2157_config.fe = dev->dvb->frontend;
+		I2C_ZALLOC_PLATFORM_DATA(si2157_config, goto out_free);
+		si2157_config->fe = dev->dvb->frontend;
 #ifdef CONFIG_MEDIA_CONTROLLER_DVB
-		si2157_config.mdev = dev->media_dev;
+		si2157_config->mdev = dev->media_dev;
 #endif
-		si2157_config.if_port = 1;
-		si2157_config.inversion = true;
+		si2157_config->if_port = 1;
+		si2157_config->inversion = true;
 		strlcpy(info.type, "si2157", I2C_NAME_SIZE);
 		info.addr = 0x60;
-		info.platform_data = &si2157_config;
+		info.platform_data = si2157_config;
 		request_module("si2157");
 
 		client = i2c_new_device(
 			tuner_i2c,
 			&info);
 		if (client == NULL || client->dev.driver == NULL) {
+			kfree(si2157_config);
 			dvb_frontend_detach(dev->dvb->frontend);
 			result = -ENODEV;
 			goto out_free;
 		}
 
 		if (!try_module_get(client->dev.driver->owner)) {
-			i2c_unregister_device(client);
+			cx231xx_i2c_unregister_device(client);
 			dvb_frontend_detach(dev->dvb->frontend);
 			result = -ENODEV;
 			goto out_free;
@@ -878,7 +898,7 @@ static int dvb_init(struct cx231xx *dev)
 	{
 		struct i2c_client *client;
 		struct i2c_board_info info;
-		struct si2157_config si2157_config;
+		struct si2157_config *si2157_config;
 
 		memset(&info, 0, sizeof(struct i2c_board_info));
 
@@ -900,29 +920,30 @@ static int dvb_init(struct cx231xx *dev)
 		dvb->frontend->callback = cx231xx_tuner_callback;
 
 		/* attach tuner */
-		memset(&si2157_config, 0, sizeof(si2157_config));
-		si2157_config.fe = dev->dvb->frontend;
+		I2C_ZALLOC_PLATFORM_DATA(si2157_config, goto out_free);
+		si2157_config->fe = dev->dvb->frontend;
 #ifdef CONFIG_MEDIA_CONTROLLER_DVB
-		si2157_config.mdev = dev->media_dev;
+		si2157_config->mdev = dev->media_dev;
 #endif
-		si2157_config.if_port = 1;
-		si2157_config.inversion = true;
+		si2157_config->if_port = 1;
+		si2157_config->inversion = true;
 		strlcpy(info.type, "si2157", I2C_NAME_SIZE);
 		info.addr = 0x60;
-		info.platform_data = &si2157_config;
+		info.platform_data = si2157_config;
 		request_module("si2157");
 
 		client = i2c_new_device(
 			tuner_i2c,
 			&info);
 		if (client == NULL || client->dev.driver == NULL) {
+			kfree(si2157_config);
 			dvb_frontend_detach(dev->dvb->frontend);
 			result = -ENODEV;
 			goto out_free;
 		}
 
 		if (!try_module_get(client->dev.driver->owner)) {
-			i2c_unregister_device(client);
+			cx231xx_i2c_unregister_device(client);
 			dvb_frontend_detach(dev->dvb->frontend);
 			result = -ENODEV;
 			goto out_free;
@@ -961,32 +982,34 @@ static int dvb_init(struct cx231xx *dev)
 
 	case CX231XX_BOARD_EVROMEDIA_FULL_HYBRID_FULLHD:
 	{
-		struct si2157_config si2157_config = {};
-		struct si2168_config si2168_config = {};
+		struct si2157_config *si2157_config;
+		struct si2168_config *si2168_config;
 		struct i2c_board_info info = {};
 		struct i2c_client *client;
 		struct i2c_adapter *adapter;
 
 		/* attach demodulator chip */
-		si2168_config.ts_mode = SI2168_TS_SERIAL; /* from *.inf file */
-		si2168_config.fe = &dev->dvb->frontend;
-		si2168_config.i2c_adapter = &adapter;
-		si2168_config.ts_clock_inv = true;
+		I2C_ZALLOC_PLATFORM_DATA(si2168_config, goto out_free);
+		si2168_config->ts_mode = SI2168_TS_SERIAL; /* from *.inf file */
+		si2168_config->fe = &dev->dvb->frontend;
+		si2168_config->i2c_adapter = &adapter;
+		si2168_config->ts_clock_inv = true;
 
 		strlcpy(info.type, "si2168", sizeof(info.type));
 		info.addr = dev->board.demod_addr;
-		info.platform_data = &si2168_config;
+		info.platform_data = si2168_config;
 
 		request_module(info.type);
 		client = i2c_new_device(demod_i2c, &info);
 
 		if (client == NULL || client->dev.driver == NULL) {
+			kfree(si2168_config);
 			result = -ENODEV;
 			goto out_free;
 		}
 
 		if (!try_module_get(client->dev.driver->owner)) {
-			i2c_unregister_device(client);
+			cx231xx_i2c_unregister_device(client);
 			result = -ENODEV;
 			goto out_free;
 		}
@@ -994,32 +1017,34 @@ static int dvb_init(struct cx231xx *dev)
 		dvb->i2c_client_demod = client;
 
 		/* attach tuner chip */
-		si2157_config.fe = dev->dvb->frontend;
+		I2C_ZALLOC_PLATFORM_DATA(si2157_config, goto out_free);
+		si2157_config->fe = dev->dvb->frontend;
 #ifdef CONFIG_MEDIA_CONTROLLER_DVB
-		si2157_config.mdev = dev->media_dev;
+		si2157_config->mdev = dev->media_dev;
 #endif
-		si2157_config.if_port = 1;
-		si2157_config.inversion = false;
+		si2157_config->if_port = 1;
+		si2157_config->inversion = false;
 
 		memset(&info, 0, sizeof(info));
 		strlcpy(info.type, "si2157", sizeof(info.type));
 		info.addr = dev->board.tuner_addr;
-		info.platform_data = &si2157_config;
+		info.platform_data = si2157_config;
 
 		request_module(info.type);
 		client = i2c_new_device(tuner_i2c, &info);
 
 		if (client == NULL || client->dev.driver == NULL) {
+			kfree(si2157_config);
 			module_put(dvb->i2c_client_demod->dev.driver->owner);
-			i2c_unregister_device(dvb->i2c_client_demod);
+			cx231xx_i2c_unregister_device(dvb->i2c_client_demod);
 			result = -ENODEV;
 			goto out_free;
 		}
 
 		if (!try_module_get(client->dev.driver->owner)) {
-			i2c_unregister_device(client);
+			cx231xx_i2c_unregister_device(client);
 			module_put(dvb->i2c_client_demod->dev.driver->owner);
-			i2c_unregister_device(dvb->i2c_client_demod);
+			cx231xx_i2c_unregister_device(dvb->i2c_client_demod);
 			result = -ENODEV;
 			goto out_free;
 		}
@@ -1032,27 +1057,29 @@ static int dvb_init(struct cx231xx *dev)
 	{
 		struct i2c_client *client;
 		struct i2c_board_info info = {};
-		struct mn88473_config mn88473_config = {};
+		struct mn88473_config *mn88473_config;
 
 		/* attach demodulator chip */
-		mn88473_config.i2c_wr_max = 16;
-		mn88473_config.xtal = 25000000;
-		mn88473_config.fe = &dev->dvb->frontend;
+		I2C_ZALLOC_PLATFORM_DATA(mn88473_config, goto out_free);
+		mn88473_config->i2c_wr_max = 16;
+		mn88473_config->xtal = 25000000;
+		mn88473_config->fe = &dev->dvb->frontend;
 
 		strlcpy(info.type, "mn88473", sizeof(info.type));
 		info.addr = dev->board.demod_addr;
-		info.platform_data = &mn88473_config;
+		info.platform_data = mn88473_config;
 
 		request_module(info.type);
 		client = i2c_new_device(demod_i2c, &info);
 
 		if (client == NULL || client->dev.driver == NULL) {
+			kfree(mn88473_config);
 			result = -ENODEV;
 			goto out_free;
 		}
 
 		if (!try_module_get(client->dev.driver->owner)) {
-			i2c_unregister_device(client);
+			cx231xx_i2c_unregister_device(client);
 			result = -ENODEV;
 			goto out_free;
 		}
-- 
2.11.0

