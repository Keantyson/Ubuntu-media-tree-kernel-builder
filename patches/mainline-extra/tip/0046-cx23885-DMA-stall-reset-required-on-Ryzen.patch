From ff8974c2bb7ab707d3161e90d770db54af4b9ec1 Mon Sep 17 00:00:00 2001
From: Brad Love <hidden@email.co>
Date: Mon, 26 Feb 2018 16:43:51 -0600
Subject: [PATCH 46/49] cx23885: DMA stall reset required on Ryzen

Reported and initial patch by mspieth.

Work in progress

On Ryzen and XEON platforms the cx23885 DMA
engine can stall under high load and cause a board
to become inoperable until reboot. This patch resets
the DMA in case a stall is detected

Signed-off-by: Brad Love <hidden@email.co>
---
 drivers/media/pci/cx23885/cx23885-core.c | 195 ++++++++++++++++++++++++++++++-
 drivers/media/pci/cx23885/cx23885-reg.h  |  12 ++
 2 files changed, 202 insertions(+), 5 deletions(-)

diff --git a/drivers/media/pci/cx23885/cx23885-core.c b/drivers/media/pci/cx23885/cx23885-core.c
index 4f468ed625ba..588bebbdab16 100644
--- a/drivers/media/pci/cx23885/cx23885-core.c
+++ b/drivers/media/pci/cx23885/cx23885-core.c
@@ -49,9 +49,14 @@ static unsigned int card[]  = {[0 ... (CX23885_MAXBOARDS - 1)] = UNSET };
 module_param_array(card,  int, NULL, 0444);
 MODULE_PARM_DESC(card, "card type");
 
+// TODO remove when correct register is identified
+static unsigned int startreadmask = 0x3fffff;
+module_param(startreadmask, int, 0644);
+MODULE_PARM_DESC(debug, "startreadmask for test");
+
 #define dprintk(level, fmt, arg...)\
 	do { if (debug >= level)\
-		printk(KERN_DEBUG pr_fmt("%s: " fmt), \
+		dev_printk(KERN_DEBUG, &dev->pci->dev, "%s: " fmt, \
 		       __func__, ##arg); \
 	} while (0)
 
@@ -418,6 +423,18 @@ static int cx23885_risc_decode(u32 risc)
 	return incr[risc >> 28] ? incr[risc >> 28] : 1;
 }
 
+static void cx23885_reg_dump2(struct cx23885_dev *dev, uint32_t addr, uint32_t len)
+{
+	uint32_t i;
+	for(i=0; i < len; i+=4*sizeof(uint32_t), addr+=4*sizeof(uint32_t)) {
+		dprintk(1, "%08x: %08x %08x %08x %08x\n", addr,
+				cx_read(addr),
+				cx_read(addr+4),
+				cx_read(addr+8),
+				cx_read(addr+12));
+	}
+}
+
 static void cx23885_wakeup(struct cx23885_tsport *port,
 			   struct cx23885_dmaqueue *q, u32 count)
 {
@@ -604,6 +621,33 @@ static void cx23885_risc_disasm(struct cx23885_tsport *port,
 	}
 }
 
+static void cx23885_clear_bridge_error(struct cx23885_dev *dev)
+{
+	uint32_t reg1_val = cx_read(UNKNOWN_ERROR_REG_1);
+	uint32_t reg2_val = cx_read(UNKNOWN_ERROR_REG_2);
+	int i;
+	if (reg1_val && reg2_val) {
+		// cx_write(0x400a0, 0);
+		// cx_write(0x400a4, 0xffffffff);
+		// cx_write(0x400a4, 0);
+		//cx_write(UNKNOWN_ERROR_REG_1, reg1_val);
+		//cx_write(UNKNOWN_ERROR_REG_2, reg2_val);
+		cx_write(UNKNOWN_ERROR_REG_1, 1);
+		cx_write(UNKNOWN_ERROR_REG_2, 1);
+		//cx_write(UNKNOWN_ERROR_REG_1, 0);
+		//cx_write(UNKNOWN_ERROR_REG_2, 0);
+		for (i=0; i  < 1; i++) {
+			cx_read(VID_B_DMA);
+			cx_read(VBI_B_DMA);
+			cx_read(VID_C_DMA);
+			cx_read(VBI_C_DMA);
+		}
+		//cx_write(0x400a4, cx_read(0x400a4));
+		//cx_write(0x400a8, cx_read(0x400a8));
+		dprintk(0, "%s() dma in progress detected 0x%08x 0x%08x, clearing\n", __func__, reg1_val, reg2_val);
+	}
+}
+
 static void cx23885_shutdown(struct cx23885_dev *dev)
 {
 	/* disable RISC controller */
@@ -631,11 +675,11 @@ static void cx23885_shutdown(struct cx23885_dev *dev)
 	cx_write(VID_C_INT_MSK, 0);
 	cx_write(AUDIO_INT_INT_MSK, 0);
 	cx_write(AUDIO_EXT_INT_MSK, 0);
-
 }
 
 static void cx23885_reset(struct cx23885_dev *dev)
 {
+	uint32_t reg;
 	dprintk(1, "%s()\n", __func__);
 
 	cx23885_shutdown(dev);
@@ -649,6 +693,8 @@ static void cx23885_reset(struct cx23885_dev *dev)
 	cx_write(CLK_DELAY, cx_read(CLK_DELAY) & 0x80000000);
 	cx_write(PAD_CTRL, 0x00500300);
 
+	/* clear dma in progress */
+	cx23885_clear_bridge_error(dev);
 	mdelay(100);
 
 	cx23885_sram_channel_setup(dev, &dev->sram_channels[SRAM_CH01],
@@ -665,6 +711,22 @@ static void cx23885_reset(struct cx23885_dev *dev)
 	cx23885_sram_channel_setup(dev, &dev->sram_channels[SRAM_CH09], 128, 0);
 
 	cx23885_gpio_setup(dev);
+
+	cx_write(VID_B_SRC_SEL, 0);
+	reg = cx_read(PAD_CTRL);
+	reg |= 0x7; /* set TS1_OE & TS1_SOP_OE & TS2_SOP_OE */
+	cx_write(PAD_CTRL, reg);
+
+	/* clear dma in progress */
+	cx23885_clear_bridge_error(dev);
+	cx23885_reg_dump2(dev, DEV_CNTRL2, 0x100);
+	cx23885_reg_dump2(dev, DMA1_PTR1, 0xe0);
+	cx23885_reg_dump2(dev, TM_CNT_LDW, 0x50);
+	cx23885_reg_dump2(dev, 0x130000, 0x100);
+	cx23885_reg_dump2(dev, VID_B_DMA, 0x20);
+	cx23885_reg_dump2(dev, VID_B_GPCNT, 0xe0);
+	cx23885_reg_dump2(dev, VID_C_DMA, 0x20);
+	cx23885_reg_dump2(dev, VID_C_GPCNT, 0xe0);
 }
 
 
@@ -679,6 +741,8 @@ static int cx23885_pci_quirks(struct cx23885_dev *dev)
 	if (dev->bridge == CX23885_BRIDGE_885)
 		cx_clear(RDR_TLCTL0, 1 << 4);
 
+	/* clear dma in progress */
+	cx23885_clear_bridge_error(dev);
 	return 0;
 }
 
@@ -1293,6 +1357,11 @@ void cx23885_free_buffer(struct cx23885_dev *dev, struct cx23885_buffer *buf)
 	pci_free_consistent(dev->pci, risc->size, risc->cpu, risc->dma);
 }
 
+static void cx23885_reg_dump(struct cx23885_tsport *port, uint32_t addr, uint32_t len)
+{
+	cx23885_reg_dump2(port->dev, addr, len);
+}
+
 static void cx23885_tsport_reg_dump(struct cx23885_tsport *port)
 {
 	struct cx23885_dev *dev = port->dev;
@@ -1343,6 +1412,18 @@ static void cx23885_tsport_reg_dump(struct cx23885_tsport *port)
 		port->reg_ts_clk_en, cx_read(port->reg_ts_clk_en));
 	dprintk(1, "%s() ts_int_msk(0x%08X)     0x%08x\n", __func__,
 		port->reg_ts_int_msk, cx_read(port->reg_ts_int_msk));
+	dprintk(1, "%s() ts_int_status(0x%08X)  0x%08x\n", __func__,
+		port->reg_ts_int_stat, cx_read(port->reg_ts_int_stat));
+	dprintk(1, "%s() PCI_INT_STAT           0x%08X\n", __func__,
+		cx_read(PCI_INT_STAT));
+	dprintk(1, "%s() VID_B_INT_MSTAT        0x%08X\n", __func__,
+		cx_read(VID_B_INT_MSTAT));
+	dprintk(1, "%s() VID_B_INT_SSTAT        0x%08X\n", __func__,
+		cx_read(VID_B_INT_SSTAT));
+	dprintk(1, "%s() VID_C_INT_MSTAT        0x%08X\n", __func__,
+		cx_read(VID_C_INT_MSTAT));
+	dprintk(1, "%s() VID_C_INT_SSTAT        0x%08X\n", __func__,
+		cx_read(VID_C_INT_SSTAT));
 }
 
 int cx23885_start_dma(struct cx23885_tsport *port,
@@ -1355,6 +1436,9 @@ int cx23885_start_dma(struct cx23885_tsport *port,
 	dprintk(1, "%s() w: %d, h: %d, f: %d\n", __func__,
 		dev->width, dev->height, dev->field);
 
+	/* clear dma in progress */
+	cx23885_clear_bridge_error(dev);
+
 	/* Stop the fifo and risc engine for this port */
 	cx_clear(port->reg_dma_ctl, port->dma_ctl_val);
 
@@ -1435,22 +1519,83 @@ int cx23885_start_dma(struct cx23885_tsport *port,
 	case CX23885_BRIDGE_888:
 		/* enable irqs */
 		dprintk(1, "%s() enabling TS int's and DMA\n", __func__);
+		/* clear dma in progress */
+		cx23885_clear_bridge_error(dev);
 		cx_set(port->reg_ts_int_msk,  port->ts_int_msk_val);
 		cx_set(port->reg_dma_ctl, port->dma_ctl_val);
+		/* clear dma in progress */
+		cx23885_clear_bridge_error(dev);
 		cx23885_irq_add(dev, port->pci_irqmask);
 		cx23885_irq_enable_all(dev);
+		/* clear dma in progress */
+		cx23885_clear_bridge_error(dev);
 		break;
 	default:
 		BUG();
 	}
 
 	cx_set(DEV_CNTRL2, (1<<5)); /* Enable RISC controller */
+	/* clear dma in progress */
+	cx23885_clear_bridge_error(dev);
 
 	if (cx23885_boards[dev->board].portb == CX23885_MPEG_ENCODER)
 		cx23885_av_clk(dev, 1);
 
-	if (debug > 4)
+	if (debug > 4) {
 		cx23885_tsport_reg_dump(port);
+		cx23885_reg_dump(port, DEV_CNTRL2, 0x100);
+		/* dont show the dma regs as they might affect the actual dma */
+		cx23885_reg_dump(port, VID_B_GPCNT, 0xe0);
+		cx23885_reg_dump(port, VID_C_GPCNT, 0xe0);
+	}
+
+	if (startreadmask & 0x000001)
+		cx_read(DEV_CNTRL2);
+	if (startreadmask & 0x000002)
+		cx23885_irq_get_mask(dev);
+	if (startreadmask & 0x000004)
+		cx_read(AUDIO_INT_INT_MSK);
+	if (startreadmask & 0x000008)
+		cx_read(AUD_INT_DMA_CTL);
+	if (startreadmask & 0x000010)
+		cx_read(AUDIO_EXT_INT_MSK);
+	if (startreadmask & 0x000020)
+		cx_read(AUD_EXT_DMA_CTL);
+	if (startreadmask & 0x000040)
+		cx_read(PAD_CTRL);
+	if (startreadmask & 0x000080)
+		cx_read(ALT_PIN_OUT_SEL);
+	if (startreadmask & 0x000100)
+		cx_read(GPIO2);
+	if (startreadmask & 0x000200)
+		cx_read(port->reg_gpcnt);
+	if (startreadmask & 0x000400)
+		cx_read(port->reg_gpcnt_ctl);
+	if (startreadmask & 0x000800)
+		cx_read(port->reg_dma_ctl);
+	if (startreadmask & 0x001000)
+		if (port->reg_src_sel)
+			cx_read(port->reg_src_sel);
+	if (startreadmask & 0x002000)
+		cx_read(port->reg_lngth);
+	if (startreadmask & 0x004000)
+		cx_read(port->reg_hw_sop_ctrl);
+	if (startreadmask & 0x008000)
+		cx_read(port->reg_gen_ctrl);
+	if (startreadmask & 0x010000)
+		cx_read(port->reg_bd_pkt_status);
+	if (startreadmask & 0x020000)
+		cx_read(port->reg_sop_status);
+	if (startreadmask & 0x040000)
+		cx_read(port->reg_fifo_ovfl_stat);
+	if (startreadmask & 0x080000)
+		cx_read(port->reg_vld_misc);
+	if (startreadmask & 0x100000)
+		cx_read(port->reg_ts_clk_en);
+	if (startreadmask & 0x200000)
+		cx_read(port->reg_ts_int_msk);
+	/* clear dma in progress */
+	cx23885_clear_bridge_error(dev);
 
 	return 0;
 }
@@ -1459,12 +1604,37 @@ static int cx23885_stop_dma(struct cx23885_tsport *port)
 {
 	struct cx23885_dev *dev = port->dev;
 	u32 reg;
+	int delay = 0;
+	uint32_t reg1_val;
+	uint32_t reg2_val;
 
 	dprintk(1, "%s()\n", __func__);
 
+	/* clear dma in progress */
+	//cx23885_clear_bridge_error(dev);
+	//cx_clear(DEV_CNTRL2, (1<<5)); /* Disable RISC controller */
+	// just in case wait for any dma to complete before stopping dma
+	//udelay(100);
+	/* clear dma in progress */
+	//cx23885_clear_bridge_error(dev);
 	/* Stop interrupts and DMA */
 	cx_clear(port->reg_ts_int_msk, port->ts_int_msk_val);
 	cx_clear(port->reg_dma_ctl, port->dma_ctl_val);
+	// just in case wait for any dma to complete before allowing dealloc
+	mdelay(20);
+	for(delay=0; delay < 100; delay++) {
+		reg1_val = cx_read(UNKNOWN_ERROR_REG_1);
+		reg2_val = cx_read(UNKNOWN_ERROR_REG_2);
+		if (reg1_val == 0 || reg2_val == 0) {
+			break;
+		}
+		mdelay(1);
+	}
+	dprintk(0, "delay=%d reg1=0x%08x reg2=0x%08x\n", delay, reg1_val, reg2_val);
+
+	/* clear dma in progress */
+	//cx23885_clear_bridge_error(dev);
+	//udelay(100);
 
 	if (cx23885_boards[dev->board].portb == CX23885_MPEG_ENCODER) {
 
@@ -1484,6 +1654,11 @@ static int cx23885_stop_dma(struct cx23885_tsport *port)
 	if (cx23885_boards[dev->board].portb == CX23885_MPEG_ENCODER)
 		cx23885_av_clk(dev, 0);
 
+	cx23885_reg_dump(port, DEV_CNTRL2, 0x100);
+	//cx23885_reg_dump(port, VID_B_DMA, 0x20);
+	cx23885_reg_dump(port, VID_B_GPCNT, 0xe0);
+	//cx23885_reg_dump(port, VID_C_DMA, 0x20);
+	cx23885_reg_dump(port, VID_C_GPCNT, 0xe0);
 	return 0;
 }
 
@@ -1560,6 +1735,7 @@ void cx23885_buf_queue(struct cx23885_tsport *port, struct cx23885_buffer *buf)
 
 static void do_cancel_buffers(struct cx23885_tsport *port, char *reason)
 {
+	struct cx23885_dev *dev = port->dev;
 	struct cx23885_dmaqueue *q = &port->mpegq;
 	struct cx23885_buffer *buf;
 	unsigned long flags;
@@ -1579,6 +1755,7 @@ static void do_cancel_buffers(struct cx23885_tsport *port, char *reason)
 
 void cx23885_cancel_buffers(struct cx23885_tsport *port)
 {
+	struct cx23885_dev *dev = port->dev;
 	dprintk(1, "%s()\n", __func__);
 	cx23885_stop_dma(port);
 	do_cancel_buffers(port, "cancel");
@@ -1707,6 +1884,12 @@ static irqreturn_t cx23885_irq(int irq, void *dev_id)
 
 	pci_status = cx_read(PCI_INT_STAT);
 	pci_mask = cx23885_irq_get_mask(dev);
+	if ((pci_status & pci_mask) == 0) {
+		dprintk(7, "pci_status: 0x%08x  pci_mask: 0x%08x\n",
+			pci_status, pci_mask);
+		goto out;
+	}
+
 	vida_status = cx_read(VID_A_INT_STAT);
 	vida_mask = cx_read(VID_A_INT_MSK);
 	audint_status = cx_read(AUDIO_INT_INT_STAT);
@@ -1716,7 +1899,9 @@ static irqreturn_t cx23885_irq(int irq, void *dev_id)
 	ts2_status = cx_read(VID_C_INT_STAT);
 	ts2_mask = cx_read(VID_C_INT_MSK);
 
-	if ((pci_status == 0) && (ts2_status == 0) && (ts1_status == 0))
+	if (((pci_status & pci_mask) == 0) &&
+		((ts2_status & ts2_mask) == 0) &&
+		((ts1_status & ts1_mask) == 0))
 		goto out;
 
 	vida_count = cx_read(VID_A_GPCNT);
@@ -1843,7 +2028,7 @@ static irqreturn_t cx23885_irq(int irq, void *dev_id)
 	}
 
 	if (handled)
-		cx_write(PCI_INT_STAT, pci_status);
+		cx_write(PCI_INT_STAT, pci_status & pci_mask);
 out:
 	return IRQ_RETVAL(handled);
 }
diff --git a/drivers/media/pci/cx23885/cx23885-reg.h b/drivers/media/pci/cx23885/cx23885-reg.h
index 2d3cbafe2402..e1203dec1ca8 100644
--- a/drivers/media/pci/cx23885/cx23885-reg.h
+++ b/drivers/media/pci/cx23885/cx23885-reg.h
@@ -288,6 +288,16 @@ Channel manager Data Structure entry = 20 DWORD
 #define AUDIO_EXT_INT_MSTAT	0x00040068
 #define AUDIO_EXT_INT_SSTAT	0x0004006C
 
+/* Undocumented registers when set to 1
+ * cause the 885 bridge (unknown about the other bridges)
+ * to become inoperable.
+ * These act as status flags and clearing
+ * them allow operation to continue.
+ * They are cleared by writing their
+ * contents back to them, like clearing interrupts */
+#define UNKNOWN_ERROR_REG_1	0x00040090
+#define UNKNOWN_ERROR_REG_2	0x00040094
+
 #define RDR_CFG0	0x00050000
 #define RDR_CFG1	0x00050004
 #define RDR_CFG2	0x00050008
@@ -386,6 +396,8 @@ Channel manager Data Structure entry = 20 DWORD
 #define VID_B_PIXEL_FRMT	0x00130184
 
 /* Video C Interface */
+#define VID_C_DMA		0x00130200
+#define VBI_C_DMA		0x00130208
 #define VID_C_GPCNT		0x00130220
 #define VID_C_GPCNT_CTL		0x00130230
 #define VBI_C_GPCNT_CTL		0x00130234
-- 
2.14.1

