From 944525b6a9b755458ad1af12716be1e33d80ae6f Mon Sep 17 00:00:00 2001
From: Brad Love <hidden@email.co>
Date: Fri, 11 Oct 2019 20:55:45 -0500
Subject: [PATCH 3/3] si2168: Add some various v3 stat ioctls

---
 drivers/media/dvb-frontends/si2168.c | 208 ++++++++++++++++++++++++++-
 1 file changed, 201 insertions(+), 7 deletions(-)

diff --git a/drivers/media/dvb-frontends/si2168.c b/drivers/media/dvb-frontends/si2168.c
index 72794ead8..94420d9f6 100644
--- a/drivers/media/dvb-frontends/si2168.c
+++ b/drivers/media/dvb-frontends/si2168.c
@@ -117,13 +117,12 @@ static int si2168_ts_bus_ctrl(struct dvb_frontend *fe, int acquire)
 	return ret;
 }
 
-static int si2168_read_status(struct dvb_frontend *fe, enum fe_status *status)
+static int si2168_get_status(struct dvb_frontend *fe, enum fe_status *status)
 {
 	struct i2c_client *client = fe->demodulator_priv;
 	struct si2168_dev *dev = i2c_get_clientdata(client);
 	struct dtv_frontend_properties *c = &fe->dtv_property_cache;
-	int ret, i, sys;
-	unsigned int utmp, utmp1, utmp2;
+	int ret, sys;
 	struct si2168_cmd cmd;
 
 	*status = 0;
@@ -198,8 +197,6 @@ static int si2168_read_status(struct dvb_frontend *fe, enum fe_status *status)
 		break;
 	}
 
-	dev->fe_status = *status;
-
 	if (*status & FE_HAS_LOCK) {
 		c->cnr.len = 1;
 		c->cnr.stat[0].scale = FE_SCALE_DECIBEL;
@@ -212,8 +209,120 @@ static int si2168_read_status(struct dvb_frontend *fe, enum fe_status *status)
 	dev_dbg(&client->dev, "status=%02x args=%*ph\n",
 			*status, cmd.rlen, cmd.args);
 
+	dev->fe_status = *status;
+
+	return 0;
+err:
+	dev_dbg(&client->dev, "failed=%d\n", ret);
+	return ret;
+}
+
+static int si2168_read_snr(struct dvb_frontend *fe, u16 *snr)
+{
+	struct i2c_client *client = fe->demodulator_priv;
+	struct si2168_dev *dev = i2c_get_clientdata(client);
+	struct dtv_frontend_properties *c = &fe->dtv_property_cache;
+	enum fe_status status = 0;
+	u64 stat_snr;
+	int ret;
+
+	*snr = 0;
+
+	if (!dev->active) {
+		ret = -EAGAIN;
+		goto err;
+	}
+
+	ret = si2168_get_status(fe, &status);
+	if (ret)
+		goto err;
+
+	if (status & FE_HAS_LOCK) {
+		stat_snr = c->cnr.stat[0].svalue;
+		do_div(stat_snr, 100);
+		*snr = (u16)stat_snr;
+	}
+
+	dev_dbg(&client->dev, "snr=%02x\n", *snr);
+
+	return 0;
+err:
+	dev_dbg(&client->dev, "failed=%d\n", ret);
+	return ret;
+}
+
+static int si2168_read_signal_strength(struct dvb_frontend *fe, u16 *rssi)
+{
+	int ret = -ENOSYS;
+	struct i2c_client *client = fe->demodulator_priv;
+	struct si2168_dev *dev = i2c_get_clientdata(client);
+	struct dtv_frontend_properties *c = &fe->dtv_property_cache;
+	enum fe_status status = 0;
+	u64 stat_strength;
+
+	*rssi = 0;
+
+	if (!dev->active) {
+		ret = -EAGAIN;
+		goto err;
+	}
+
+	ret = si2168_get_status(fe, &status);
+	if (ret)
+		goto err;
+
+	if (status & FE_HAS_LOCK) {
+		if (fe->ops.tuner_ops.get_rf_strength)
+			ret = fe->ops.tuner_ops.get_rf_strength(fe, rssi);
+		else if (c->strength.len > 0) {
+			if (c->strength.stat[0].svalue < -80000)
+				*rssi = 0;
+			else {
+				stat_strength = c->strength.stat[0].svalue;
+				do_div(stat_strength, 1000);
+				*rssi = (u16)(stat_strength + 100);
+				*rssi = (*rssi > 100) ? 0xffff :
+					(u16)(((u32)*rssi) * 0xffff / 100);
+			}
+		}
+	} else {
+		c->strength.len = 1;
+		c->strength.stat[0].scale = FE_SCALE_NOT_AVAILABLE;
+	}
+
+	dev_dbg(&client->dev, "rssi=%02x\n", *rssi);
+
+	return 0;
+err:
+	dev_dbg(&client->dev, "failed=%d\n", ret);
+	return ret;
+}
+
+/* ------------------------------------------------------------------------ */
+
+static int si2168_read_ber(struct dvb_frontend *fe, u32 *ber)
+{
+	struct i2c_client *client = fe->demodulator_priv;
+	struct si2168_dev *dev = i2c_get_clientdata(client);
+	struct dtv_frontend_properties *c = &fe->dtv_property_cache;
+	enum fe_status status = 0;
+	int ret, i;
+	unsigned int utmp, utmp1, utmp2;
+	struct si2168_cmd cmd;
+
+	*ber = 0;
+
+	if (!dev->active) {
+		ret = -EAGAIN;
+		goto err;
+	}
+
+	ret = si2168_get_status(fe, &status);
+	if (ret)
+		goto err;
+
 	/* BER */
-	if (*status & FE_HAS_VITERBI) {
+	if (status & FE_HAS_VITERBI) {
 		cmd_init(&cmd, "\x82\x00", 2, 3);
 		ret = si2168_cmd_execute(client, &cmd);
 		if (ret)
@@ -230,6 +339,9 @@ static int si2168_read_status(struct dvb_frontend *fe, enum fe_status *status)
 		utmp1 = cmd.args[2] * utmp1;
 		utmp2 = 100000000; /* 10^8 */
 
+		if (cmd.args[1] != 0)
+			*ber = (cmd.args[2] * utmp1) / utmp2;
+
 		dev_dbg(&client->dev,
 			"post_bit_error=%u post_bit_count=%u ber=%u*10^-%u\n",
 			utmp1, utmp2, cmd.args[2], cmd.args[1]);
@@ -243,8 +355,35 @@ static int si2168_read_status(struct dvb_frontend *fe, enum fe_status *status)
 		c->post_bit_count.stat[0].scale = FE_SCALE_NOT_AVAILABLE;
 	}
 
+	return 0;
+err:
+	dev_dbg(&client->dev, "failed=%d\n", ret);
+	return ret;
+}
+
+static int si2168_read_ucblocks(struct dvb_frontend *fe, u32 *ucb)
+{
+	struct i2c_client *client = fe->demodulator_priv;
+	struct si2168_dev *dev = i2c_get_clientdata(client);
+	struct dtv_frontend_properties *c = &fe->dtv_property_cache;
+	enum fe_status status = 0;
+	int ret;
+	unsigned int utmp1;
+	struct si2168_cmd cmd;
+
+	*ucb = 0;
+
+	if (!dev->active) {
+		ret = -EAGAIN;
+		goto err;
+	}
+
+	ret = si2168_get_status(fe, &status);
+	if (ret)
+		goto err;
+
 	/* UCB */
-	if (*status & FE_HAS_SYNC) {
+	if (status & FE_HAS_SYNC) {
 		cmd_init(&cmd, "\x84\x01", 2, 3);
 		ret = si2168_cmd_execute(client, &cmd);
 		if (ret)
@@ -257,11 +396,61 @@ static int si2168_read_status(struct dvb_frontend *fe, enum fe_status *status)
 		if (utmp1 == 0xffff)
 			utmp1 = 0;
 
+		*ucb = utmp1;
+
 		c->block_error.stat[0].scale = FE_SCALE_COUNTER;
 		c->block_error.stat[0].uvalue += utmp1;
 	} else {
 		c->block_error.stat[0].scale = FE_SCALE_NOT_AVAILABLE;
 	}
+	return 0;
+err:
+	dev_dbg(&client->dev, "failed=%d\n", ret);
+	return ret;
+}
+
+
+static int si2168_read_status(struct dvb_frontend *fe, enum fe_status *status)
+{
+	struct i2c_client *client = fe->demodulator_priv;
+	struct si2168_dev *dev = i2c_get_clientdata(client);
+	struct dtv_frontend_properties *c = &fe->dtv_property_cache;
+	int ret;
+	u16 rssi;
+	u32 ber, ucb;
+
+	*status = 0;
+
+	if (!dev->active) {
+		ret = -EAGAIN;
+		goto err;
+	}
+
+	ret = si2168_get_status(fe, status);
+	if (ret)
+		goto err;
+
+	if ((*status & FE_HAS_LOCK) == 0) {
+		/* No lock, reset all statistics */
+		c->strength.len = 1;
+		c->strength.stat[0].scale = FE_SCALE_NOT_AVAILABLE;
+		c->block_error.stat[0].scale = FE_SCALE_NOT_AVAILABLE;
+		c->post_bit_error.stat[0].scale = FE_SCALE_NOT_AVAILABLE;
+		c->post_bit_count.stat[0].scale = FE_SCALE_NOT_AVAILABLE;
+		return 0;
+	}
+
+	ret = si2168_read_signal_strength(fe, &rssi);
+	if (ret)
+		goto err;
+
+	ret = si2168_read_ber(fe, &ber);
+	if (ret)
+		goto err;
+
+	ret = si2168_read_ucblocks(fe, &ucb);
+	if (ret)
+		goto err;
 
 	return 0;
 err:
@@ -720,6 +909,11 @@ static const struct dvb_frontend_ops si2168_ops = {
 	.set_frontend = si2168_set_frontend,
 
 	.read_status = si2168_read_status,
+
+	.read_ber             = si2168_read_ber,
+	.read_signal_strength = si2168_read_signal_strength,
+	.read_snr             = si2168_read_snr,
+	.read_ucblocks        = si2168_read_ucblocks,
 };
 
 static int si2168_probe(struct i2c_client *client,
-- 
2.20.1

