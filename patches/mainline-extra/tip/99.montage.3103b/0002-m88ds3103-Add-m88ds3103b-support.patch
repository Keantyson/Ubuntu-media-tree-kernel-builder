From 2204bf9c17841a77ada37f913623c2e465d6cd61 Mon Sep 17 00:00:00 2001
From: Brad Love <hidden@email.co>
Date: Thu, 27 Dec 2018 12:25:50 -0600
Subject: [PATCH 2/4] m88ds3103: Add m88ds3103b support

---
 drivers/media/dvb-frontends/m88ds3103.c      | 554 ++++++++++++++++++-
 drivers/media/dvb-frontends/m88ds3103_priv.h |   9 +
 2 files changed, 550 insertions(+), 13 deletions(-)

diff --git a/drivers/media/dvb-frontends/m88ds3103.c b/drivers/media/dvb-frontends/m88ds3103.c
index 123f2a337..9d976c103 100644
--- a/drivers/media/dvb-frontends/m88ds3103.c
+++ b/drivers/media/dvb-frontends/m88ds3103.c
@@ -18,6 +18,20 @@
 
 static const struct dvb_frontend_ops m88ds3103_ops;
 
+static int debugI2c = 0;
+module_param(debugI2c, int, 0644);
+MODULE_PARM_DESC(debugI2c, "enable i2c debug messages");
+
+#define I2Cprintk(args...) \
+	do { \
+		if (debugI2c) \
+			pr_err(args); \
+	} while (0)
+
+
+//#undef dev_dbg
+//#define dev_dbg dev_info
+
 /* write single register with mask */
 static int m88ds3103_update_bits(struct m88ds3103_dev *dev,
 				u8 reg, u8 mask, u8 val)
@@ -73,6 +87,84 @@ static int m88ds3103_wr_reg_val_tab(struct m88ds3103_dev *dev,
 	return ret;
 }
 
+
+static int ds3k_dt_write(struct m88ds3103_dev *dev, int reg, int data)
+{
+	int err;
+	u8 buf[] = {reg, data};
+	u8 val, tmp;
+	struct i2c_adapter *tmp_i2c;
+	struct i2c_msg msg = {
+		.addr = dev->dt_addr, .flags = 0, .buf = buf, .len = 2
+	};
+
+	m88ds3103_update_bits(dev, 0x11, 0x01, 0x00);
+
+	val = 0x11;
+	err = regmap_write(dev->regmap, 0x03, val);
+	if (err)
+		pr_err("%s() gate fail\n", __func__);
+
+	err = i2c_transfer(dev->client->adapter, &msg, 1);
+	if (err != 1) {
+		pr_err("%s: 0x%02x (err == %i, reg == 0x%02x,"
+			 " value == 0x%02x)\n", __func__, dev->dt_addr,
+			 err, reg, data);
+		m88ds3103_update_bits(dev, 0x11, 0x01, 0x01);
+		return -EREMOTEIO;
+	}
+	m88ds3103_update_bits(dev, 0x11, 0x01, 0x01);
+
+	I2Cprintk("%s: 0x%02x reg 0x%02x, value 0x%02x\n",
+		__func__, dev->dt_addr, reg, data);
+
+	return 0;
+}
+
+static int ds3k_dt_read(struct m88ds3103_dev *dev, u8 reg)
+{
+	u8 val, tmp;
+	int ret;
+	u8 b0[] = { reg };
+	u8 b1[] = { 0 };
+	struct i2c_adapter *tmp_i2c;
+	struct i2c_msg msg[] = {
+		{
+			.addr = dev->dt_addr,
+			.flags = 0,
+			.buf = b0,
+			.len = 1
+		},
+		{
+			.addr = dev->dt_addr,
+			.flags = I2C_M_RD,
+			.buf = b1,
+			.len = 1
+		}
+	};
+
+	m88ds3103_update_bits(dev, 0x11, 0x01, 0x00);
+
+	val = 0x12;
+	ret = regmap_write(dev->regmap, 0x03, val);
+	if (ret)
+		pr_err("%s() gate fail\n", __func__);
+
+	ret = i2c_transfer(dev->client->adapter, msg, 2);
+	if (ret != 2) {
+		pr_err("%s : 0x%02x (err=%d, reg=0x%02x)\n",
+			__func__, dev->dt_addr, ret, reg);
+		m88ds3103_update_bits(dev, 0x11, 0x01, 0x01);
+		return -EREMOTEIO;
+	}
+	m88ds3103_update_bits(dev, 0x11, 0x01, 0x01);
+
+	I2Cprintk("%s : 0x%02x reg 0x%02x, value 0x%02x\n",
+		__func__, dev->dt_addr, reg, b1[0]);
+
+	return b1[0];
+}
+
 /*
  * Get the demodulator AGC PWM voltage setting supplied to the tuner.
  */
@@ -297,6 +389,349 @@ static int m88ds3103_read_status(struct dvb_frontend *fe,
 	return ret;
 }
 
+int _mt_fe_dmd_ds3k_select_mclk(struct m88ds3103_dev *dev)
+{
+	struct dtv_frontend_properties *c = &dev->fe.dtv_property_cache;
+	u32 adc_Freq_MHz[3] = {96, 93, 99};
+	u8  reg16_list[3] = {96, 92, 100}, reg16, reg15;
+	u32 offset_MHz[3];
+	u32 max_offset = 0;
+	u32 old_setting = dev->mclk;
+	u32 tuner_freq_MHz = c->frequency / 1000;
+
+	u8 i;
+
+	char bBigSymbol = 0;
+
+	bBigSymbol = (c->symbol_rate > 45010000) ? 1 : 0;
+
+	if(bBigSymbol) {
+		#if 0
+		adc_Freq_MHz[0] = 216;
+		adc_Freq_MHz[1] = 222;
+		adc_Freq_MHz[2] = 219;
+
+		reg16_list[0] = 112;
+		reg16_list[1] = 116;
+		reg16_list[2] = 114;
+		#endif
+
+		reg16 = 115;			//147 - 32;
+	} else {
+		reg16 = 96;
+
+		/* TODO: IS THIS NECESSARY ? */
+		for(i = 0; i < 3; i++)
+		{
+			offset_MHz[i] = tuner_freq_MHz % adc_Freq_MHz[i];
+
+			if(offset_MHz[i] > (adc_Freq_MHz[i] / 2))
+				offset_MHz[i] = adc_Freq_MHz[i] - offset_MHz[i];
+
+			if(offset_MHz[i] > max_offset)
+			{
+				max_offset = offset_MHz[i];
+				reg16 = reg16_list[i];
+				dev->mclk= adc_Freq_MHz[i] * 1000 * 1000;
+
+				if(bBigSymbol)
+					dev->mclk /= 2;
+
+				pr_err("%s() modifying mclk %u -> %u\n", __func__,
+					old_setting, dev->mclk);
+			}
+		}
+	}
+
+	if(dev->mclk == 93000000)
+		regmap_write(dev->regmap, 0xA0, 0x42);
+	else if(dev->mclk == 96000000)
+		regmap_write(dev->regmap, 0xA0, 0x44);
+	else if(dev->mclk == 99000000)
+		regmap_write(dev->regmap, 0xA0, 0x46);
+	else if(dev->mclk == 110250000)
+		regmap_write(dev->regmap, 0xA0, 0x4E);
+	else
+		regmap_write(dev->regmap, 0xA0, 0x44);
+
+	reg15 = ds3k_dt_read(dev, 0x15);
+
+	ds3k_dt_write(dev, 0x05, 0x40);
+	ds3k_dt_write(dev, 0x11, 0x08);
+
+	if(bBigSymbol) {
+		reg15 |= 0x02;
+	} else {
+		reg15 &= ~0x02;
+	}
+	ds3k_dt_write(dev, 0x15, reg15);
+
+	ds3k_dt_write(dev, 0x16, reg16);
+
+	msleep(5);
+
+	ds3k_dt_write(dev, 0x05, 0x00);
+	ds3k_dt_write(dev, 0x11, (u8)(bBigSymbol ? 0x0E : 0x0A));
+	msleep(5);
+
+	return 0;
+}
+
+int _mt_fe_dmd_ds3k_set_mclk(struct m88ds3103_dev *dev, u32 MCLK_KHz)
+{
+	u8 tmp3 = 0, tmp4 = 0;
+#if 0
+	if((state->chip_ID == FeDmdId_DS3002B) || (state->chip_ID == FeDmdId_DS3103)) {
+		// 0x22 bit[7:6] clkxM_d
+		tmp3 = ds3k_readreg(state, 0x22);
+		// 0x24 bit[7:6] clkxM_sel
+		tmp4 = ds3k_readreg(state, 0x24);
+
+		switch(MCLK_KHz) {
+			case 192000:		// 4b'0011 MCLK = 192M
+				tmp3 |= 0xc0;		// 0x22 bit[7:6] = 2b'11
+				tmp4 &= 0x3f;		// 0x24 bit[7:6] = 2b'00
+				break;
+
+			case 144000:		// 4b'0100 MCLK = 144M
+				tmp3 &= 0x3f;		// 0x22 bit[7:6] = 2b'00
+				tmp4 &= 0x7f;		// 0x24 bit[7:6] = 2b'01
+				tmp4 |= 0x40;
+				break;
+
+			case 115200:		// 4b'0101 MCLK = 115.2M
+				tmp3 &= 0x7f;		// 0x22 bit[7:6] = 2b'01
+				tmp3 |= 0x40;
+				tmp4 &= 0x7f;		// 0x24 bit[7:6] = 2b'01
+				tmp4 |= 0x40;
+				break;
+
+			case 72000:			// 4b'1100 MCLK = 72M
+				tmp4 |= 0xc0;		// 0x24 bit[7:6] = 2b'11
+				tmp3 &= 0x3f;		// 0x22 bit[7:6] = 2b'00
+				break;
+
+			case 96000:			// 4b'0110 MCLK = 96M
+			default:
+				tmp3 &= 0xbf;		// 0x22 bit[7:6] = 2b'10
+				tmp3 |= 0x80;
+
+				tmp4 &= 0x7f;		// 0x24 bit[7:6] = 2b'01
+				tmp4 |= 0x40;
+				break;
+		}
+
+		regmap_write(dev->regmap, 0x22, tmp3);
+		regmap_write(dev->regmap, 0x24, tmp4);
+	} else if(state->chip_ID == FeDmdId_DS3103B) {
+#endif
+		u8 reg11 = 0x0A, reg15, reg16, reg1D, reg1E, reg1F, tmp;
+		u8 sm, f0 = 0, f1 = 0, f2 = 0, f3 = 0, pll_ldpc_mode;
+		u16 pll_div_fb, N;
+		u32 div;
+
+		reg15 = ds3k_dt_read(dev, 0x15);
+		reg16 = ds3k_dt_read(dev, 0x16);
+		reg1D = ds3k_dt_read(dev, 0x1D);
+
+
+		if(dev->cfg->ts_mode != M88DS3103_TS_SERIAL) {
+			#if 1		// 130603
+			if(reg16 == 92)
+			{
+				tmp = 93;
+			}
+			else if(reg16 == 100)
+			{
+				tmp = 99;
+			}
+			else // if(reg16 == 96)
+			{
+				tmp = 96;
+			}
+
+			MCLK_KHz *= tmp;
+			MCLK_KHz /= 96;
+			#endif
+		}
+
+
+		pll_ldpc_mode = (reg15 >> 1) & 0x01;
+
+		//pll_div_fb = (pll_ldpc_mode == 1) ? 147 : 128;
+		//pll_div_fb -= 32;
+		pll_div_fb = (reg15 & 0x01) << 8;
+		pll_div_fb += reg16;
+		pll_div_fb += 32;
+
+		div = 9000 * pll_div_fb * 4;
+		div /= MCLK_KHz;
+
+
+		if(dev->cfg->ts_mode == M88DS3103_TS_SERIAL) {
+			reg11 |= 0x02;
+
+			if(div <= 32)
+			{
+				N = 2;
+
+				f0 = 0;
+				f1 = div / N;
+				f2 = div - f1;
+				f3 = 0;
+			}
+			else if(div <= 34)
+			{
+				N = 3;
+
+				f0 = div / N;
+				f1 = (div - f0) / (N - 1);
+				f2 = div - f0 - f1;
+				f3 = 0;
+			}
+			else if(div <= 64)
+			{
+				N = 4;
+
+				f0 = div / N;
+				f1 = (div - f0) / (N - 1);
+				f2 = (div - f0 - f1) / (N - 2);
+				f3 = div - f0 - f1 - f2;
+			}
+			else
+			{
+				N = 4;
+
+				f0 = 16;
+				f1 = 16;
+				f2 = 16;
+				f3 = 16;
+			}
+
+
+			if(f0 == 16)
+				f0 = 0;
+			else if((f0 < 8) && (f0 != 0))
+				f0 = 8;
+
+			if(f1 == 16)
+				f1 = 0;
+			else if((f1 < 8) && (f1 != 0))
+				f1 = 8;
+
+			if(f2 == 16)
+				f2 = 0;
+			else if((f2 < 8) && (f2 != 0))
+				f2 = 8;
+
+			if(f3 == 16)
+				f3 = 0;
+			else if((f3 < 8) && (f3 != 0))
+				f3 = 8;
+		}
+		else
+		{
+			reg11 &= ~0x02;
+
+			if(div <= 32)
+			{
+				N = 2;
+
+				f0 = 0;
+				f1 = div / N;
+				f2 = div - f1;
+				f3 = 0;
+			}
+			else if(div <= 48)
+			{
+				N = 3;
+
+				f0 = div / N;
+				f1 = (div - f0) / (N - 1);
+				f2 = div - f0 - f1;
+				f3 = 0;
+			}
+			else if(div <= 64)
+			{
+				N = 4;
+
+				f0 = div / N;
+				f1 = (div - f0) / (N - 1);
+				f2 = (div - f0 - f1) / (N - 2);
+				f3 = div - f0 - f1 - f2;
+			}
+			else
+			{
+				N = 4;
+
+				f0 = 16;
+				f1 = 16;
+				f2 = 16;
+				f3 = 16;
+			}
+
+			if(f0 == 16)
+				f0 = 0;
+			else if((f0 < 9) && (f0 != 0))
+				f0 = 9;
+
+			if(f1 == 16)
+				f1 = 0;
+			else if((f1 < 9) && (f1 != 0))
+				f1 = 9;
+
+			if(f2 == 16)
+				f2 = 0;
+			else if((f2 < 9) && (f2 != 0))
+				f2 = 9;
+
+			if(f3 == 16)
+				f3 = 0;
+			else if((f3 < 9) && (f3 != 0))
+				f3 = 9;
+		}
+
+		sm = N - 1;
+
+		/* Write to registers */
+		//reg15 &= 0x01;
+		//reg15 |= (pll_div_fb >> 8) & 0x01;
+
+		//reg16 = pll_div_fb & 0xFF;
+
+		reg1D &= ~0x03;
+		reg1D |= sm;
+		reg1D |= 0x80;
+
+		reg1E = ((f3 << 4) + f2) & 0xFF;
+		reg1F = ((f1 << 4) + f0) & 0xFF;
+
+		ds3k_dt_write(dev, 0x05, 0x40);
+		ds3k_dt_write(dev, 0x11, 0x08);
+		ds3k_dt_write(dev, 0x1D, reg1D);
+		ds3k_dt_write(dev, 0x1E, reg1E);
+		ds3k_dt_write(dev, 0x1F, reg1F);
+
+		ds3k_dt_write(dev, 0x17, 0xc1);
+		ds3k_dt_write(dev, 0x17, 0x81);
+		msleep(5);
+
+		ds3k_dt_write(dev, 0x05, 0x00);
+		ds3k_dt_write(dev, 0x11, 0x0A);
+		msleep(5);
+//	}
+//	else if(state->chip_ID == FeDmdId_DS300X)
+//	{
+//		return -4;
+//	}
+//	else
+//	{
+//		return -6;
+//	}
+
+	return 0;
+}
+
 static int m88ds3103_set_frontend(struct dvb_frontend *fe)
 {
 	struct m88ds3103_dev *dev = fe->demodulator_priv;
@@ -307,7 +742,7 @@ static int m88ds3103_set_frontend(struct dvb_frontend *fe)
 	u8 u8tmp, u8tmp1 = 0, u8tmp2 = 0; /* silence compiler warning */
 	u8 buf[3];
 	u16 u16tmp;
-	u32 tuner_frequency_khz, target_mclk;
+	u32 tuner_frequency_khz, target_mclk, u32tmp;
 	s32 s32tmp;
 
 	dev_dbg(&client->dev,
@@ -331,6 +766,18 @@ static int m88ds3103_set_frontend(struct dvb_frontend *fe)
 
 	/* Disable demod clock path */
 	if (dev->chip_id == M88RS6000_CHIP_ID) {
+		ret = regmap_read(dev->regmap, 0xb2, &u32tmp);
+		if (ret)
+			goto err;
+		if (u32tmp == 0x01) {
+			ret = regmap_write(dev->regmap, 0x00, 0x00);
+			if (ret)
+				goto err;
+			ret = regmap_write(dev->regmap, 0xb2, 0x00);
+			if (ret)
+				goto err;
+		}
+
 		ret = regmap_write(dev->regmap, 0x06, 0xe0);
 		if (ret)
 			goto err;
@@ -368,6 +815,11 @@ static int m88ds3103_set_frontend(struct dvb_frontend *fe)
 		else
 			target_mclk = 144000000;
 
+		if (dev->chiptype == M88DS3103_CHIPTYPE_3103B) {
+			_mt_fe_dmd_ds3k_select_mclk(dev);
+			_mt_fe_dmd_ds3k_set_mclk(dev, target_mclk);
+		}
+
 		/* Enable demod clock path */
 		ret = regmap_write(dev->regmap, 0x06, 0x00);
 		if (ret)
@@ -479,6 +931,29 @@ static int m88ds3103_set_frontend(struct dvb_frontend *fe)
 		ret = m88ds3103_update_bits(dev, 0x9d, 0x08, 0x08);
 		if (ret)
 			goto err;
+
+		if (dev->chiptype == M88DS3103_CHIPTYPE_3103B) {
+			buf[0] = ds3k_dt_read(dev, 0x15);
+			buf[1] = ds3k_dt_read(dev, 0x16);
+
+			if(c->symbol_rate > 45010000) {
+				buf[0] &= ~0x03;
+				buf[0] |= 0x02;
+				buf[0] |= ((147 - 32) >> 8) & 0x01;
+				buf[1] = (147 - 32) & 0xFF;
+			} else {
+				buf[0] &= ~0x03;
+				buf[0] |= ((128 - 32) >> 8) & 0x01;
+				buf[1] = (128 - 32) & 0xFF;
+			}
+			ds3k_dt_write(dev, 0x15, buf[0]);
+			ds3k_dt_write(dev, 0x16, buf[1]);
+
+//			value = ds3k_readreg(state, 0x30);
+//			value &= ~0x80;
+//			regmap_write(dev->regmap, 0x30, value);
+		}
+
 		ret = regmap_write(dev->regmap, 0xf1, 0x01);
 		if (ret)
 			goto err;
@@ -553,6 +1028,9 @@ static int m88ds3103_set_frontend(struct dvb_frontend *fe)
 	else
 		u8tmp = 0x06;
 
+	/* TODO: already done for 3103b above */
+//	_mt_fe_dmd_ds3k_set_mclk(dev, target_mclk);
+
 	ret = regmap_write(dev->regmap, 0xc3, 0x08);
 	if (ret)
 		goto err;
@@ -588,6 +1066,16 @@ static int m88ds3103_set_frontend(struct dvb_frontend *fe)
 	if (ret)
 		goto err;
 
+	if (dev->chiptype == M88DS3103_CHIPTYPE_3103B) {
+		/* enable/disable 192M LDPC clock */
+		ret = m88ds3103_update_bits(dev, 0x29, 0x10,
+					(c->delivery_system == SYS_DVBS) ? 0 : 0x10);
+		if (ret)
+			goto err;
+
+		ret = m88ds3103_update_bits(dev, 0xc9, 0x08, 0x08);
+	}
+
 	dev_dbg(&client->dev, "carrier offset=%d\n",
 		(tuner_frequency_khz - c->frequency));
 
@@ -664,10 +1152,13 @@ static int m88ds3103_init(struct dvb_frontend *fe)
 	dev_info(&client->dev, "found a '%s' in cold state\n",
 		 m88ds3103_ops.info.name);
 
-	if (dev->chip_id == M88RS6000_CHIP_ID)
+	if (dev->chiptype == M88DS3103_CHIPTYPE_3103B)
+		name = M88DS3103B_FIRMWARE;
+	else if (dev->chip_id == M88RS6000_CHIP_ID)
 		name = M88RS6000_FIRMWARE;
 	else
 		name = M88DS3103_FIRMWARE;
+
 	/* request the firmware, this will block and timeout */
 	ret = request_firmware(&firmware, name, &client->dev);
 	if (ret) {
@@ -714,6 +1205,12 @@ static int m88ds3103_init(struct dvb_frontend *fe)
 	dev_info(&client->dev, "firmware version: %X.%X\n",
 		 (utmp >> 4) & 0xf, (utmp >> 0 & 0xf));
 
+	if (dev->chiptype == M88DS3103_CHIPTYPE_3103B) {
+		ds3k_dt_write(dev, 0x21, 0x92);
+		ds3k_dt_write(dev, 0x15, 0x6C);
+		ds3k_dt_write(dev, 0x17, 0xC1);
+		ds3k_dt_write(dev, 0x17, 0x81);
+	}
 warm:
 	/* warm state */
 	dev->warm = true;
@@ -730,7 +1227,7 @@ static int m88ds3103_init(struct dvb_frontend *fe)
 err_release_firmware:
 	release_firmware(firmware);
 err:
-	dev_dbg(&client->dev, "failed=%d\n", ret);
+	dev_dbg(&client->dev, "%s failed=%d\n", __func__, ret);
 	return ret;
 }
 
@@ -768,7 +1265,7 @@ static int m88ds3103_sleep(struct dvb_frontend *fe)
 
 	return 0;
 err:
-	dev_dbg(&client->dev, "failed=%d\n", ret);
+	dev_dbg(&client->dev, "%s failed=%d\n", __func__, ret);
 	return ret;
 }
 
@@ -937,7 +1434,7 @@ static int m88ds3103_get_frontend(struct dvb_frontend *fe,
 
 	return 0;
 err:
-	dev_dbg(&client->dev, "failed=%d\n", ret);
+	dev_dbg(&client->dev, "%s failed=%d\n", __func__, ret);
 	return ret;
 }
 
@@ -1004,7 +1501,7 @@ static int m88ds3103_set_tone(struct dvb_frontend *fe,
 
 	return 0;
 err:
-	dev_dbg(&client->dev, "failed=%d\n", ret);
+	dev_dbg(&client->dev, "%s failed=%d\n", __func__, ret);
 	return ret;
 }
 
@@ -1054,7 +1551,7 @@ static int m88ds3103_set_voltage(struct dvb_frontend *fe,
 
 	return 0;
 err:
-	dev_dbg(&client->dev, "failed=%d\n", ret);
+	dev_dbg(&client->dev, "%s failed=%d\n", __func__, ret);
 	return ret;
 }
 
@@ -1133,7 +1630,7 @@ static int m88ds3103_diseqc_send_master_cmd(struct dvb_frontend *fe,
 
 	return 0;
 err:
-	dev_dbg(&client->dev, "failed=%d\n", ret);
+	dev_dbg(&client->dev, "%s failed=%d\n", __func__, ret);
 	return ret;
 }
 
@@ -1212,7 +1709,7 @@ static int m88ds3103_diseqc_send_burst(struct dvb_frontend *fe,
 
 	return 0;
 err:
-	dev_dbg(&client->dev, "failed=%d\n", ret);
+	dev_dbg(&client->dev, "%s failed=%d\n", __func__, ret);
 	return ret;
 }
 
@@ -1247,7 +1744,7 @@ static int m88ds3103_select(struct i2c_mux_core *muxc, u32 chan)
 	/* Open tuner I2C repeater for 1 xfer, closes automatically */
 	ret = __i2c_transfer(client->adapter, &msg, 1);
 	if (ret != 1) {
-		dev_warn(&client->dev, "i2c wr failed=%d\n", ret);
+		dev_warn(&client->dev, "%s failed=%d\n", __func__, ret);
 		if (ret >= 0)
 			ret = -EREMOTEIO;
 		return ret;
@@ -1373,6 +1870,8 @@ static int m88ds3103_probe(struct i2c_client *client,
 		goto err;
 	}
 
+	pr_err("%s()\n", __func__);
+
 	dev->client = client;
 	dev->config.clock = pdata->clk;
 	dev->config.i2c_wr_max = pdata->i2c_wr_max;
@@ -1397,12 +1896,18 @@ static int m88ds3103_probe(struct i2c_client *client,
 		goto err_kfree;
 	}
 
+	pr_err("%s()\n", __func__);
+
 	/* 0x00: chip id[6:0], 0x01: chip ver[7:0], 0x02: chip ver[15:8] */
 	ret = regmap_read(dev->regmap, 0x00, &utmp);
 	if (ret)
 		goto err_kfree;
 
+	pr_err("%s()\n", __func__);
+
 	dev->chip_id = utmp >> 1;
+	dev->chiptype = (u8)id->driver_data;
+
 	dev_dbg(&client->dev, "chip_id=%02x\n", dev->chip_id);
 
 	switch (dev->chip_id) {
@@ -1415,6 +1920,8 @@ static int m88ds3103_probe(struct i2c_client *client,
 		goto err_kfree;
 	}
 
+	pr_err("%s()\n", __func__);
+
 	switch (dev->cfg->clock_out) {
 	case M88DS3103_CLOCK_OUT_DISABLED:
 		utmp = 0x80;
@@ -1430,11 +1937,15 @@ static int m88ds3103_probe(struct i2c_client *client,
 		goto err_kfree;
 	}
 
+	pr_err("%s()\n", __func__);
+
 	if (!pdata->ts_clk) {
 		ret = -EINVAL;
 		goto err_kfree;
 	}
 
+	pr_err("%s()\n", __func__);
+
 	/* 0x29 register is defined differently for m88rs6000. */
 	/* set internal tuner address to 0x21 */
 	if (dev->chip_id == M88RS6000_CHIP_ID)
@@ -1456,7 +1967,8 @@ static int m88ds3103_probe(struct i2c_client *client,
 		goto err_kfree;
 
 	/* create mux i2c adapter for tuner */
-	dev->muxc = i2c_mux_alloc(client->adapter, &client->dev, 1, 0, 0,
+	dev->muxc = i2c_mux_alloc(client->adapter, &client->dev, 1, 0,
+				  I2C_MUX_LOCKED | I2C_MUX_GATE,
 				  m88ds3103_select, NULL);
 	if (!dev->muxc) {
 		ret = -ENOMEM;
@@ -1480,11 +1992,24 @@ static int m88ds3103_probe(struct i2c_client *client,
 	/* setup callbacks */
 	pdata->get_dvb_frontend = m88ds3103_get_dvb_frontend;
 	pdata->get_i2c_adapter = m88ds3103_get_i2c_adapter;
+
+	if (dev->chiptype == M88DS3103_CHIPTYPE_3103B) {
+		/* enable i2c repeater for tuner */
+		m88ds3103_update_bits(dev, 0x11, 0x01, 0x01);
+
+		/* get frontend address */
+		ret = regmap_read(dev->regmap, 0x29, &utmp);
+		if (ret)
+			goto err_kfree;
+		dev->dt_addr = ((utmp & 0x80) == 0) ? 0x42 >> 1 : 0x40 >> 1;
+		dev_err(&client->dev, "dt addr is 0x%02x", dev->dt_addr);
+	}
+
 	return 0;
 err_kfree:
 	kfree(dev);
 err:
-	dev_dbg(&client->dev, "failed=%d\n", ret);
+	dev_dbg(&client->dev, "%s failed=%d\n", __func__, ret);
 	return ret;
 }
 
@@ -1501,7 +2026,9 @@ static int m88ds3103_remove(struct i2c_client *client)
 }
 
 static const struct i2c_device_id m88ds3103_id_table[] = {
-	{"m88ds3103", 0},
+	{"m88rs6000",  M88DS3103_CHIPTYPE_RS6000},
+	{"m88ds3103",  M88DS3103_CHIPTYPE_3103},
+	{"m88ds3103b", M88DS3103_CHIPTYPE_3103B},
 	{}
 };
 MODULE_DEVICE_TABLE(i2c, m88ds3103_id_table);
@@ -1523,3 +2050,4 @@ MODULE_DESCRIPTION("Montage Technology M88DS3103 DVB-S/S2 demodulator driver");
 MODULE_LICENSE("GPL");
 MODULE_FIRMWARE(M88DS3103_FIRMWARE);
 MODULE_FIRMWARE(M88RS6000_FIRMWARE);
+MODULE_FIRMWARE(M88DS3103B_FIRMWARE);
diff --git a/drivers/media/dvb-frontends/m88ds3103_priv.h b/drivers/media/dvb-frontends/m88ds3103_priv.h
index 1ba0b79df..3fbc1b4a6 100644
--- a/drivers/media/dvb-frontends/m88ds3103_priv.h
+++ b/drivers/media/dvb-frontends/m88ds3103_priv.h
@@ -25,11 +25,18 @@
 #include <linux/regmap.h>
 #include <linux/math64.h>
 
+#define M88DS3103B_FIRMWARE "dvb-fe-ds3103.fw"
 #define M88DS3103_FIRMWARE "dvb-demod-m88ds3103.fw"
 #define M88RS6000_FIRMWARE "dvb-demod-m88rs6000.fw"
+
 #define M88RS6000_CHIP_ID 0x74
 #define M88DS3103_CHIP_ID 0x70
 
+#define M88DS3103_CHIPTYPE_RS6000 0
+#define M88DS3103_CHIPTYPE_3103   1
+#define M88DS3103_CHIPTYPE_3103B  2
+
+
 struct m88ds3103_dev {
 	struct i2c_client *client;
 	struct regmap_config regmap_config;
@@ -44,10 +51,12 @@ struct m88ds3103_dev {
 	struct i2c_mux_core *muxc;
 	/* auto detect chip id to do different config */
 	u8 chip_id;
+	u8 chiptype;
 	/* main mclk is calculated for M88RS6000 dynamically */
 	s32 mclk;
 	u64 post_bit_error;
 	u64 post_bit_count;
+	u8 dt_addr;
 };
 
 struct m88ds3103_reg_val {
-- 
2.17.1

